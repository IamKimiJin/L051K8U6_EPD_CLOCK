<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [L051K8U6_EPD_CLOCK\L051K8U6_EPD_CLOCK.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image L051K8U6_EPD_CLOCK\L051K8U6_EPD_CLOCK.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 6140002: Last Updated: Tue Sep 29 00:49:54 2020
<BR><P>
<H3>Maximum Stack Usage =        464 bytes + Unknown(Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
main &rArr; Loop &rArr; Menu_MainMenu &rArr; Menu_SetTime &rArr; BTN_ModifySingleDigit &rArr; BEEP_Button &rArr; BUZZER_SetVolume &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[11]">ADC1_COMP_IRQHandler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[11]">ADC1_COMP_IRQHandler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[11]">ADC1_COMP_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[e]">DMA1_Channel1_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[f]">DMA1_Channel2_3_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[10]">DMA1_Channel4_5_6_7_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[b]">EXTI0_1_IRQHandler</a> from lto-llvm-d41ba9.o(.text.EXTI0_1_IRQHandler) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[c]">EXTI2_3_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[d]">EXTI4_15_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[9]">FLASH_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[2]">HardFault_Handler</a> from lto-llvm-d41ba9.o(.text.HardFault_Handler) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[17]">I2C1_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[18]">I2C2_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[12]">LPTIM1_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[1d]">LPUART1_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[1]">NMI_Handler</a> from lto-llvm-d41ba9.o(.text.NMI_Handler) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[7]">PVD_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[4]">PendSV_Handler</a> from lto-llvm-d41ba9.o(.text.PendSV_Handler) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[a]">RCC_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[8]">RTC_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[0]">Reset_Handler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[19]">SPI1_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[1a]">SPI2_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[3]">SVC_Handler</a> from lto-llvm-d41ba9.o(.text.SVC_Handler) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[5]">SysTick_Handler</a> from lto-llvm-d41ba9.o(.text.SysTick_Handler) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[1f]">SystemInit</a> from lto-llvm-d41ba9.o(.text.SystemInit) referenced from startup_stm32l051xx.o(.text)
 <LI><a href="#[15]">TIM21_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[16]">TIM22_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[13]">TIM2_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[14]">TIM6_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[1b]">USART1_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[1c]">USART2_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[6]">WWDG_IRQHandler</a> from startup_stm32l051xx.o(.text) referenced from startup_stm32l051xx.o(RESET)
 <LI><a href="#[20]">__main</a> from entry.o(.ARM.Collect$$$$00000000) referenced from startup_stm32l051xx.o(.text)
 <LI><a href="#[21]">_snputc</a> from printfa.o(i._snputc) referenced from printfa.o(i.__0snprintf)
 <LI><a href="#[1e]">main</a> from lto-llvm-d41ba9.o(.text.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[20]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(.text)
</UL>
<P><STRONG><a name="[1c6]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry2.o(.ARM.Collect$$$$00000001))

<P><STRONG><a name="[22]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[31]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[1c7]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[1c8]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[1c9]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[1ca]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[1cb]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[0]"></a>Reset_Handler</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[11]"></a>ADC1_COMP_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Called By]<UL><LI><a href="#[11]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC1_COMP_IRQHandler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[e]"></a>DMA1_Channel1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[f]"></a>DMA1_Channel2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[10]"></a>DMA1_Channel4_5_6_7_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[c]"></a>EXTI2_3_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[d]"></a>EXTI4_15_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[9]"></a>FLASH_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[17]"></a>I2C1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[18]"></a>I2C2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[12]"></a>LPTIM1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[1d]"></a>LPUART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[7]"></a>PVD_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[a]"></a>RCC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[8]"></a>RTC_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[19]"></a>SPI1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[1a]"></a>SPI2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[15]"></a>TIM21_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[16]"></a>TIM22_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[13]"></a>TIM2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[14]"></a>TIM6_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[1b]"></a>USART1_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[1c]"></a>USART2_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[6]"></a>WWDG_IRQHandler</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, startup_stm32l051xx.o(.text))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[7d]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_SetFrqe
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin_to_bcd
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SolarToInt
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetBaudRate
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitTick
</UL>

<P><STRONG><a name="[35]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_SetVolume
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin_to_bcd
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SolarToInt
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idivmod
</UL>

<P><STRONG><a name="[24]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1cc]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 48 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[27]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_DrawBattery
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readout_data_conv
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
</UL>

<P><STRONG><a name="[2b]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[2c]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[2d]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_SetVolume
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readout_data_conv
</UL>

<P><STRONG><a name="[2e]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_SetVolume
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readout_data_conv
</UL>

<P><STRONG><a name="[1bd]"></a>__ARM_scalbn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1cd]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[2f]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readout_data_conv
</UL>

<P><STRONG><a name="[30]"></a>__aeabi_d2ulz</STRONG> (Thumb, 54 bytes, Stack size 8 bytes, dfixul.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>

<P><STRONG><a name="[1c0]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[23]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[1ce]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[26]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1cf]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[25]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>

<P><STRONG><a name="[1d0]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[28]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[1d1]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[2a]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[29]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[33]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
<LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_idiv</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, idiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_ModifySingleDigit
</UL>

<P><STRONG><a name="[34]"></a>__aeabi_idivmod</STRONG> (Thumb, 40 bytes, Stack size 16 bytes, idiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>

<P><STRONG><a name="[9c]"></a>__aeabi_memcpy</STRONG> (Thumb, 36 bytes, Stack size 0 bytes, memcpya.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_DrawBattery
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ResetAllRegToDefault
</UL>

<P><STRONG><a name="[1d2]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[1d3]"></a>__aeabi_memcpy8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memcpya.o(.text), UNUSED)

<P><STRONG><a name="[37]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_memset$wrapper
<LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[1d4]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[1d5]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[36]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[148]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[1d6]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[38]"></a>_memset$wrapper</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>

<P><STRONG><a name="[39]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_float_avg
<LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
</UL>

<P><STRONG><a name="[3c]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_DrawBattery
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
</UL>

<P><STRONG><a name="[3d]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[19f]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_adc_to_voltage
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
</UL>

<P><STRONG><a name="[3e]"></a>__aeabi_fdiv</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, fdiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fdiv
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_DrawBattery
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_vrefint_to_vdda
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_float_avg
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_adc_to_voltage
</UL>

<P><STRONG><a name="[1a1]"></a>__aeabi_fcmple</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_float_avg
</UL>

<P><STRONG><a name="[99]"></a>__aeabi_fcmpge</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, fcmpge.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_DrawBattery
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_float_avg
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[19d]"></a>__aeabi_dcmple</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dcmple.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
</UL>

<P><STRONG><a name="[19c]"></a>__aeabi_dcmplt</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dcmplt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmplt
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
</UL>

<P><STRONG><a name="[19e]"></a>__aeabi_dcmpgt</STRONG> (Thumb, 44 bytes, Stack size 8 bytes, dcmpgt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_dcmpgt
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
</UL>

<P><STRONG><a name="[3f]"></a>__aeabi_i2f</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, fflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_float_avg
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_adc_to_voltage
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
</UL>

<P><STRONG><a name="[40]"></a>__aeabi_ui2f</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ffltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_vrefint_to_vdda
</UL>

<P><STRONG><a name="[41]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_SetVolume
</UL>

<P><STRONG><a name="[1a0]"></a>__aeabi_f2iz</STRONG> (Thumb, 50 bytes, Stack size 0 bytes, ffixi.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
</UL>

<P><STRONG><a name="[42]"></a>__aeabi_d2iz</STRONG> (Thumb, 62 bytes, Stack size 16 bytes, dfixi.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __aeabi_d2iz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_DrawBattery
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
</UL>

<P><STRONG><a name="[43]"></a>__aeabi_d2uiz</STRONG> (Thumb, 50 bytes, Stack size 8 bytes, dfixui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_d2uiz &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_SetVolume
</UL>

<P><STRONG><a name="[9b]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_DrawBattery
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
</UL>

<P><STRONG><a name="[44]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readout_data_conv
</UL>

<P><STRONG><a name="[3b]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[3a]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[b]"></a>EXTI0_1_IRQHandler</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.EXTI0_1_IRQHandler))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = EXTI0_1_IRQHandler &rArr; LL_EXTI_IsActiveFlag_0_31
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_IsActiveFlag_0_31
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_ClearFlag_0_31
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[2]"></a>HardFault_Handler</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.HardFault_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = HardFault_Handler &rArr; SERIAL_SendStringRN &rArr; SERIAL_SendString &rArr; SERIAL_SendData &rArr; LL_USART_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_SendStringRN
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[1]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[4]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[3]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[5]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(RESET)
</UL>
<P><STRONG><a name="[1f]"></a>SystemInit</STRONG> (Thumb, 100 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SystemInit
</UL>
<BR>[Address Reference Count : 1]<UL><LI> startup_stm32l051xx.o(.text)
</UL>
<P><STRONG><a name="[1e]"></a>main</STRONG> (Thumb, 58 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 464<LI>Call Chain = main &rArr; Loop &rArr; Menu_MainMenu &rArr; Menu_SetTime &rArr; BTN_ModifySingleDigit &rArr; BEEP_Button &rArr; BUZZER_SetVolume &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SYSCFG_VREFINT_SetConnection
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[1b6]"></a>__0snprintf</STRONG> (Thumb, 50 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1d7]"></a>__1snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[1d8]"></a>__2snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[1d9]"></a>__c89snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf), UNUSED)

<P><STRONG><a name="[85]"></a>snprintf</STRONG> (Thumb, 0 bytes, Stack size 40 bytes, printfa.o(i.__0snprintf))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = snprintf
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpRTCReg
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpEEPROM
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBKPR
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SERIAL_DebugPrint
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SetTime
</UL>

<P><STRONG><a name="[32]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[29]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[1c5]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1b8]"></a>__kernel_poly</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1b9]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1ba]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1bb]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1bc]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1be]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1da]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[1db]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[1dc]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[1c3]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[81]"></a>pow</STRONG> (Thumb, 2548 bytes, Stack size 128 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
<LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_SetVolume
</UL>

<P><STRONG><a name="[1c4]"></a>sqrt</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[1bf]"></a>_fp_digits</STRONG> (Thumb, 344 bytes, Stack size 64 bytes, printfa.o(i._fp_digits), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2ulz
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1b7]"></a>_printf_core</STRONG> (Thumb, 1754 bytes, Stack size 128 bytes, printfa.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_fp_digits
</UL>
<BR>[Called By]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0snprintf
</UL>

<P><STRONG><a name="[1c2]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printfa.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[1c1]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printfa.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[21]"></a>_snputc</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, printfa.o(i._snputc))
<BR>[Address Reference Count : 1]<UL><LI> printfa.o(i.__0snprintf)
</UL>
<P><STRONG><a name="[45]"></a>ADC_Disable</STRONG> (Thumb, 220 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.ADC_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADC_Disable &rArr; LL_ADC_REG_StopConversion.208
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_StopConversion.208
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsStopConversionOngoing.209
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing.207
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled.202
<LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_DisableInternalRegulator
<LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Disable.210
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_ClearFlag_ADRDY
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_EnableADC
</UL>

<P><STRONG><a name="[4d]"></a>ADC_Enable</STRONG> (Thumb, 132 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = ADC_Enable &rArr; LL_ADC_SetCommonPathInternalCh.204
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_100ns
<LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetCommonPathInternalCh.204
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled.202
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsActiveFlag_ADRDY
<LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_EnableInternalRegulator.203
<LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Enable
<LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_ClearFlag_ADRDY
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_EnableADC
</UL>

<P><STRONG><a name="[53]"></a>ADC_GetChannel</STRONG> (Thumb, 112 bytes, Stack size 48 bytes, lto-llvm-d41ba9.o(.text.ADC_GetChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 124<LI>Call Chain = ADC_GetChannel &rArr; conv_float_avg &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartConversionSequence
<LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_vrefint_to_vdda
<LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_float_avg
<LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;conv_adc_to_voltage
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[58]"></a>ADC_StartCal</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.ADC_StartCal))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = ADC_StartCal &rArr; delay_100ns
</UL>
<BR>[Calls]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_100ns
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_StartCalibration
<LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled.202
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsActiveFlag_EOCAL
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_ClearFlag_EOCAL
</UL>
<BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_EnableADC
</UL>

<P><STRONG><a name="[54]"></a>ADC_StartConversionSequence</STRONG> (Thumb, 336 bytes, Stack size 40 bytes, lto-llvm-d41ba9.o(.text.ADC_StartConversionSequence))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = ADC_StartConversionSequence &rArr; LL_ADC_REG_SetSequencerChannels
</UL>
<BR>[Calls]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_StopConversion.208
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_StartConversion
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_SetSequencerChannels
<LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_ReadConversionData12
<LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsStopConversionOngoing.209
<LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_IsConversionOngoing.207
<LI><a href="#[60]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsActiveFlag_EOC
<LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsActiveFlag_ADRDY
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_ClearFlag_EOS
<LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_ClearFlag_EOC
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetChannel
</UL>

<P><STRONG><a name="[62]"></a>BEEP_Button</STRONG> (Thumb, 40 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.BEEP_Button))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = BEEP_Button &rArr; BUZZER_SetVolume &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_SetVolume
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_SetFrqe
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_Beep
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_ModifySingleDigit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SetTime
</UL>

<P><STRONG><a name="[66]"></a>BEEP_OK</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lto-llvm-d41ba9.o(.text.BEEP_OK))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = BEEP_OK &rArr; BUZZER_SetVolume &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_SetVolume
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_SetFrqe
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_Beep
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SetTime
</UL>

<P><STRONG><a name="[87]"></a>BKPR_ReadByte</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.BKPR_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = BKPR_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBKPR
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[6d]"></a>BKPR_ReadDWORD</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.BKPR_ReadDWORD))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = BKPR_ReadDWORD
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKPR_WriteDWORD
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKPR_ResetAll
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
</UL>

<P><STRONG><a name="[67]"></a>BKPR_ResetAll</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lto-llvm-d41ba9.o(.text.BKPR_ResetAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = BKPR_ResetAll &rArr; BKPR_ReadDWORD
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKPR_ReadDWORD
<LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_ReleaseBackupDomainReset
<LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_ForceBackupDomainReset
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_IsEnabledBkUpAccess
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_EnableBkUpAccess
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_DisableBkUpAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FullInit
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
</UL>

<P><STRONG><a name="[6e]"></a>BKPR_WriteDWORD</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.BKPR_WriteDWORD))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BKPR_WriteDWORD &rArr; BKPR_ReadDWORD
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKPR_ReadDWORD
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_IsEnabledBkUpAccess
<LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_EnableBkUpAccess
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_DisableBkUpAccess
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
</UL>

<P><STRONG><a name="[6f]"></a>BTN_ModifySingleDigit</STRONG> (Thumb, 310 bytes, Stack size 48 bytes, lto-llvm-d41ba9.o(.text.BTN_ModifySingleDigit))
<BR><BR>[Stack]<UL><LI>Max Depth = 368<LI>Call Chain = BTN_ModifySingleDigit &rArr; BEEP_Button &rArr; BUZZER_SetVolume &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_ReadUP
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_ReadDOWN
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Button
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_idiv
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SetTime
</UL>

<P><STRONG><a name="[72]"></a>BTN_ReadDOWN</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lto-llvm-d41ba9.o(.text.BTN_ReadDOWN))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BTN_ReadDOWN &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_ModifySingleDigit
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[75]"></a>BTN_ReadSET</STRONG> (Thumb, 72 bytes, Stack size 16 bytes, lto-llvm-d41ba9.o(.text.BTN_ReadSET))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BTN_ReadSET &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SetTime
</UL>

<P><STRONG><a name="[71]"></a>BTN_ReadUP</STRONG> (Thumb, 64 bytes, Stack size 16 bytes, lto-llvm-d41ba9.o(.text.BTN_ReadUP))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BTN_ReadUP &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_ModifySingleDigit
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SetTime
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[76]"></a>BTN_WaitAll</STRONG> (Thumb, 112 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.BTN_WaitAll))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BTN_WaitAll &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SetTime
</UL>

<P><STRONG><a name="[77]"></a>BTN_WaitSET</STRONG> (Thumb, 52 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.BTN_WaitSET))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BTN_WaitSET &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
</UL>

<P><STRONG><a name="[65]"></a>BUZZER_Beep</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lto-llvm-d41ba9.o(.text.BUZZER_Beep))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = BUZZER_Beep &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_CC_EnableChannel
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_CC_DisableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FullInit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_OK
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Button
</UL>

<P><STRONG><a name="[7a]"></a>BUZZER_Enable</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.BUZZER_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BUZZER_Enable &rArr; LL_TIM_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetCounter
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_EnableCounter
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_CC_DisableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_EnableBUZZER
</UL>

<P><STRONG><a name="[63]"></a>BUZZER_SetFrqe</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lto-llvm-d41ba9.o(.text.BUZZER_SetFrqe))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = BUZZER_SetFrqe &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetCounter
<LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetAutoReload.222
<LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FullInit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_OK
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Button
</UL>

<P><STRONG><a name="[64]"></a>BUZZER_SetVolume</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, lto-llvm-d41ba9.o(.text.BUZZER_SetVolume))
<BR><BR>[Stack]<UL><LI>Max Depth = 312<LI>Call Chain = BUZZER_SetVolume &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetCompareCH3.219
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_GetAutoReload
<LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FullInit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_OK
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Button
</UL>

<P><STRONG><a name="[16a]"></a>Delay_100ns</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.Delay_100ns))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = Delay_100ns
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Enable_SHT30_I2C
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_EnableGDEH029A1
</UL>

<P><STRONG><a name="[83]"></a>DumpBKPR</STRONG> (Thumb, 168 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.DumpBKPR))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DumpBKPR &rArr; SERIAL_SendStringRN &rArr; SERIAL_SendString &rArr; SERIAL_SendData &rArr; LL_USART_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKPR_ReadByte
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_SendStringRN
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_SendString
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FullInit
</UL>

<P><STRONG><a name="[88]"></a>DumpEEPROM</STRONG> (Thumb, 188 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.DumpEEPROM))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = DumpEEPROM &rArr; SERIAL_SendStringRN &rArr; SERIAL_SendString &rArr; SERIAL_SendData &rArr; LL_USART_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ReadByte
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_SendStringRN
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_SendString
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FullInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FUNC_SaveSetting
</UL>

<P><STRONG><a name="[8a]"></a>DumpRTCReg</STRONG> (Thumb, 196 bytes, Stack size 32 bytes, lto-llvm-d41ba9.o(.text.DumpRTCReg))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = DumpRTCReg &rArr; RTC_ReadREG &rArr; I2C_Start &rArr; i2c_reset &rArr; MX_I2C1_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_SendStringRN
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_SendString
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadREG
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FullInit
</UL>

<P><STRONG><a name="[8c]"></a>EEPROM_EraseRange</STRONG> (Thumb, 216 bytes, Stack size 32 bytes, lto-llvm-d41ba9.o(.text.EEPROM_EraseRange))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = EEPROM_EraseRange &rArr; eeprom_unlock &rArr; eeprom_wait_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_wait_busy
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_unlock
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FullInit
</UL>

<P><STRONG><a name="[89]"></a>EEPROM_ReadByte</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.EEPROM_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = EEPROM_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FUNC_SaveSetting
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FUNC_ReadSetting
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpEEPROM
</UL>

<P><STRONG><a name="[90]"></a>EEPROM_WriteByte</STRONG> (Thumb, 100 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.EEPROM_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = EEPROM_WriteByte &rArr; eeprom_unlock &rArr; eeprom_wait_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_unlock
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_lock
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FUNC_SaveSetting
</UL>

<P><STRONG><a name="[91]"></a>EPD_CheckBusy</STRONG> (Thumb, 38 bytes, Stack size 16 bytes, lto-llvm-d41ba9.o(.text.EPD_CheckBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = EPD_CheckBusy &rArr; LL_GPIO_IsInputPinSet.177
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet.177
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SetTime
</UL>

<P><STRONG><a name="[93]"></a>EPD_ClearArea</STRONG> (Thumb, 122 bytes, Stack size 48 bytes, lto-llvm-d41ba9.o(.text.EPD_ClearArea))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = EPD_ClearArea &rArr; EPD_SetWindow &rArr; EPD_SetCursor &rArr; epd_send_data &rArr; spi_send_data &rArr; LL_SPI_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_SetWindow
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epd_send_data
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SetTime
</UL>

<P><STRONG><a name="[97]"></a>EPD_ClearRAM</STRONG> (Thumb, 84 bytes, Stack size 16 bytes, lto-llvm-d41ba9.o(.text.EPD_ClearRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = EPD_ClearRAM &rArr; EPD_SetWindow &rArr; EPD_SetCursor &rArr; epd_send_data &rArr; spi_send_data &rArr; LL_SPI_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_SetWindow
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epd_send_data
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SetTime
</UL>

<P><STRONG><a name="[98]"></a>EPD_DrawBattery</STRONG> (Thumb, 284 bytes, Stack size 144 bytes, lto-llvm-d41ba9.o(.text.EPD_DrawBattery))
<BR><BR>[Stack]<UL><LI>Max Depth = 308<LI>Call Chain = EPD_DrawBattery &rArr; EPD_DrawImage &rArr; EPD_SetWindow &rArr; EPD_SetCursor &rArr; epd_send_data &rArr; spi_send_data &rArr; LL_SPI_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_DrawImage
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
</UL>

<P><STRONG><a name="[9d]"></a>EPD_DrawHLine</STRONG> (Thumb, 242 bytes, Stack size 64 bytes, lto-llvm-d41ba9.o(.text.EPD_DrawHLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = EPD_DrawHLine &rArr; EPD_SetWindow &rArr; EPD_SetCursor &rArr; epd_send_data &rArr; spi_send_data &rArr; LL_SPI_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_SetWindow
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_SendRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SetTime
</UL>

<P><STRONG><a name="[9a]"></a>EPD_DrawImage</STRONG> (Thumb, 56 bytes, Stack size 32 bytes, lto-llvm-d41ba9.o(.text.EPD_DrawImage))
<BR><BR>[Stack]<UL><LI>Max Depth = 164<LI>Call Chain = EPD_DrawImage &rArr; EPD_SetWindow &rArr; EPD_SetCursor &rArr; epd_send_data &rArr; spi_send_data &rArr; LL_SPI_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_SetWindow
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_SendRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_DrawBattery
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SetTime
</UL>

<P><STRONG><a name="[9f]"></a>EPD_DrawUTF8</STRONG> (Thumb, 840 bytes, Stack size 56 bytes, lto-llvm-d41ba9.o(.text.EPD_DrawUTF8))
<BR><BR>[Stack]<UL><LI>Max Depth = 188<LI>Call Chain = EPD_DrawUTF8 &rArr; EPD_SetWindow &rArr; EPD_SetCursor &rArr; epd_send_data &rArr; spi_send_data &rArr; LL_SPI_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_SetWindow
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_SendRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SetTime
</UL>

<P><STRONG><a name="[a0]"></a>EPD_DrawVLine</STRONG> (Thumb, 248 bytes, Stack size 64 bytes, lto-llvm-d41ba9.o(.text.EPD_DrawVLine))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = EPD_DrawVLine &rArr; EPD_SetWindow &rArr; EPD_SetCursor &rArr; epd_send_data &rArr; spi_send_data &rArr; LL_SPI_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_SetWindow
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_SendRAM
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
</UL>

<P><STRONG><a name="[a1]"></a>EPD_EnterDeepSleep</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.EPD_EnterDeepSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = EPD_EnterDeepSleep &rArr; epd_send_data &rArr; spi_send_data &rArr; LL_SPI_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epd_wait_busy
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epd_send_data
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
</UL>

<P><STRONG><a name="[a3]"></a>EPD_EnterSleep</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.EPD_EnterSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = EPD_EnterSleep &rArr; epd_send_data &rArr; spi_send_data &rArr; LL_SPI_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epd_wait_busy
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epd_send_data
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SetTime
</UL>

<P><STRONG><a name="[a4]"></a>EPD_Init</STRONG> (Thumb, 280 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.EPD_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = EPD_Init &rArr; epd_send_data_multi &rArr; spi_send_data &rArr; LL_SPI_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epd_wait_busy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epd_send_data_multi
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epd_send_data
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epd_send_cmd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin.168
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin.169
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SetTime
</UL>

<P><STRONG><a name="[9e]"></a>EPD_SendRAM</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lto-llvm-d41ba9.o(.text.EPD_SendRAM))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = EPD_SendRAM &rArr; epd_send_data_multi &rArr; spi_send_data &rArr; LL_SPI_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epd_send_data_multi
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_DrawVLine
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_DrawUTF8
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_DrawImage
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_DrawHLine
</UL>

<P><STRONG><a name="[a8]"></a>EPD_SetCursor</STRONG> (Thumb, 50 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.EPD_SetCursor))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = EPD_SetCursor &rArr; epd_send_data &rArr; spi_send_data &rArr; LL_SPI_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epd_send_data
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_SetWindow
</UL>

<P><STRONG><a name="[94]"></a>EPD_SetWindow</STRONG> (Thumb, 122 bytes, Stack size 40 bytes, lto-llvm-d41ba9.o(.text.EPD_SetWindow))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = EPD_SetWindow &rArr; EPD_SetCursor &rArr; epd_send_data &rArr; spi_send_data &rArr; LL_SPI_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_SetCursor
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epd_send_data
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_DrawVLine
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_DrawUTF8
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_DrawImage
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_DrawHLine
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_ClearRAM
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_ClearArea
</UL>

<P><STRONG><a name="[a9]"></a>EPD_Show</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, lto-llvm-d41ba9.o(.text.EPD_Show))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = EPD_Show &rArr; epd_send_data &rArr; spi_send_data &rArr; LL_SPI_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epd_wait_busy
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epd_send_data
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epd_send_cmd
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SetTime
</UL>

<P><STRONG><a name="[ac]"></a>FUNC_ReadSetting</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.FUNC_ReadSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = FUNC_ReadSetting &rArr; _SERIAL_DebugPrint &rArr; SERIAL_SendString &rArr; SERIAL_SendData &rArr; LL_USART_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ReadByte
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SERIAL_DebugPrint
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[ae]"></a>FUNC_SaveSetting</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.FUNC_SaveSetting))
<BR><BR>[Stack]<UL><LI>Max Depth = 120<LI>Call Chain = FUNC_SaveSetting &rArr; DumpEEPROM &rArr; SERIAL_SendStringRN &rArr; SERIAL_SendString &rArr; SERIAL_SendData &rArr; LL_USART_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WriteByte
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_ReadByte
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpEEPROM
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[af]"></a>FullInit</STRONG> (Thumb, 356 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.FullInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 320<LI>Call Chain = FullInit &rArr; BUZZER_SetVolume &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_EraseRange
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpRTCReg
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpEEPROM
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBKPR
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_SetVolume
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_SetFrqe
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_Beep
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKPR_ResetAll
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SERIAL_DebugPrint
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_SoftReset
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ResetAllRegToDefault
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[122]"></a>GetBitInt</STRONG> (Thumb, 34 bytes, Stack size 12 bytes, lto-llvm-d41ba9.o(.text.GetBitInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = GetBitInt
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LUNAR_SolarToLunar
</UL>

<P><STRONG><a name="[b3]"></a>I2C_ReadByte</STRONG> (Thumb, 108 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.I2C_ReadByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = I2C_ReadByte &rArr; i2c_reset &rArr; MX_I2C1_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_reset
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_ReceiveData8
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_RXNE
</UL>
<BR>[Called By]<UL><LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_ReadCmd
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadREG_Multi
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadREG
</UL>

<P><STRONG><a name="[b7]"></a>I2C_Start</STRONG> (Thumb, 416 bytes, Stack size 32 bytes, lto-llvm-d41ba9.o(.text.I2C_Start))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = I2C_Start &rArr; i2c_reset &rArr; MX_I2C1_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_reset
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_SetTransferSize
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_SetTransferRequest
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_SetSlaveAddr
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_SetMasterAddressingMode
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_TXE
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_RXNE
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_NACK
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_BUSY
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_GenerateStartCondition
<LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_DisableReloadMode
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_DisableAutoEndMode
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_ClearFlag_NACK
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_WriteCmd
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_ReadCmd
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteREG_Multi
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteREG
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadREG_Multi
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadREG
</UL>

<P><STRONG><a name="[c3]"></a>I2C_Stop</STRONG> (Thumb, 224 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.I2C_Stop))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = I2C_Stop &rArr; i2c_reset &rArr; MX_I2C1_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_reset
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_TXE
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_BUSY
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_GenerateStopCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_WriteCmd
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_ReadCmd
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteREG_Multi
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteREG
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadREG_Multi
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadREG
</UL>

<P><STRONG><a name="[c5]"></a>I2C_WriteByte</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.I2C_WriteByte))
<BR><BR>[Stack]<UL><LI>Max Depth = 172<LI>Call Chain = I2C_WriteByte &rArr; i2c_reset &rArr; MX_I2C1_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_reset
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_TransmitData8
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsActiveFlag_TXE
</UL>
<BR>[Called By]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_WriteCmd
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_ReadCmd
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteREG_Multi
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteREG
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadREG_Multi
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadREG
</UL>

<P><STRONG><a name="[c7]"></a>Init</STRONG> (Thumb, 276 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = Init &rArr; Menu_SetTime &rArr; BTN_ModifySingleDigit &rArr; BEEP_Button &rArr; BUZZER_SetVolume &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FullInit
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FUNC_SaveSetting
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FUNC_ReadSetting
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_ReadUP
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_ReadDOWN
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKPR_ReadByte
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetChannel
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SERIAL_DebugPrint
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_SendStringRN
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearA2F
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearA1F
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Enable_SHT30_I2C
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_EnableBUZZER
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_EnableADC
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SetTime
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_GetResetInfo
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_EnterStandby
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SYSCFG_VREFINT_SetConnection.89
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableIT_0_31.88
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[4b]"></a>LL_ADC_ClearFlag_ADRDY</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_ADC_ClearFlag_ADRDY))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_ClearFlag_ADRDY
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
</UL>

<P><STRONG><a name="[5e]"></a>LL_ADC_ClearFlag_EOC</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_ADC_ClearFlag_EOC))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_ClearFlag_EOC
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartConversionSequence
</UL>

<P><STRONG><a name="[59]"></a>LL_ADC_ClearFlag_EOCAL</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_ADC_ClearFlag_EOCAL))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_ClearFlag_EOCAL
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCal
</UL>

<P><STRONG><a name="[5d]"></a>LL_ADC_ClearFlag_EOS</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_ADC_ClearFlag_EOS))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_ClearFlag_EOS
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartConversionSequence
</UL>

<P><STRONG><a name="[4a]"></a>LL_ADC_Disable.210</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_ADC_Disable.210))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_Disable.210
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
</UL>

<P><STRONG><a name="[133]"></a>LL_ADC_DisableIT_EOC</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_ADC_DisableIT_EOC))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_DisableIT_EOC
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
</UL>

<P><STRONG><a name="[134]"></a>LL_ADC_DisableIT_EOS</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_ADC_DisableIT_EOS))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_DisableIT_EOS
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
</UL>

<P><STRONG><a name="[4c]"></a>LL_ADC_DisableInternalRegulator</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_ADC_DisableInternalRegulator))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_DisableInternalRegulator
</UL>
<BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
</UL>

<P><STRONG><a name="[51]"></a>LL_ADC_Enable</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_ADC_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>

<P><STRONG><a name="[135]"></a>LL_ADC_EnableInternalRegulator</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_ADC_EnableInternalRegulator))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_EnableInternalRegulator
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
</UL>

<P><STRONG><a name="[4e]"></a>LL_ADC_EnableInternalRegulator.203</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_ADC_EnableInternalRegulator.203))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_EnableInternalRegulator.203
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>

<P><STRONG><a name="[d2]"></a>LL_ADC_Init</STRONG> (Thumb, 92 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.LL_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LL_ADC_Init &rArr; LL_ADC_IsEnabled
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
</UL>

<P><STRONG><a name="[52]"></a>LL_ADC_IsActiveFlag_ADRDY</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_ADC_IsActiveFlag_ADRDY))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_IsActiveFlag_ADRDY
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartConversionSequence
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>

<P><STRONG><a name="[60]"></a>LL_ADC_IsActiveFlag_EOC</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_ADC_IsActiveFlag_EOC))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_IsActiveFlag_EOC
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartConversionSequence
</UL>

<P><STRONG><a name="[5b]"></a>LL_ADC_IsActiveFlag_EOCAL</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_ADC_IsActiveFlag_EOCAL))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_IsActiveFlag_EOCAL
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCal
</UL>

<P><STRONG><a name="[d3]"></a>LL_ADC_IsEnabled</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_ADC_IsEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Init
</UL>

<P><STRONG><a name="[46]"></a>LL_ADC_IsEnabled.202</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_ADC_IsEnabled.202))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_IsEnabled.202
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCal
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
</UL>

<P><STRONG><a name="[d4]"></a>LL_ADC_REG_Init</STRONG> (Thumb, 80 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.LL_ADC_REG_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LL_ADC_REG_Init &rArr; LL_ADC_IsEnabled
</UL>
<BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
</UL>

<P><STRONG><a name="[47]"></a>LL_ADC_REG_IsConversionOngoing.207</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_ADC_REG_IsConversionOngoing.207))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_REG_IsConversionOngoing.207
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartConversionSequence
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
</UL>

<P><STRONG><a name="[49]"></a>LL_ADC_REG_IsStopConversionOngoing.209</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_ADC_REG_IsStopConversionOngoing.209))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_REG_IsStopConversionOngoing.209
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartConversionSequence
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
</UL>

<P><STRONG><a name="[61]"></a>LL_ADC_REG_ReadConversionData12</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_ADC_REG_ReadConversionData12))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_REG_ReadConversionData12
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartConversionSequence
</UL>

<P><STRONG><a name="[12d]"></a>LL_ADC_REG_SetSequencerChAdd</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_ADC_REG_SetSequencerChAdd))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_REG_SetSequencerChAdd
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
</UL>

<P><STRONG><a name="[5c]"></a>LL_ADC_REG_SetSequencerChannels</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_ADC_REG_SetSequencerChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_REG_SetSequencerChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartConversionSequence
</UL>

<P><STRONG><a name="[131]"></a>LL_ADC_REG_SetSequencerScanDirection</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_ADC_REG_SetSequencerScanDirection))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_REG_SetSequencerScanDirection
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
</UL>

<P><STRONG><a name="[5f]"></a>LL_ADC_REG_StartConversion</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_ADC_REG_StartConversion))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_REG_StartConversion
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartConversionSequence
</UL>

<P><STRONG><a name="[48]"></a>LL_ADC_REG_StopConversion.208</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_ADC_REG_StopConversion.208))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_REG_StopConversion.208
</UL>
<BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartConversionSequence
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
</UL>

<P><STRONG><a name="[132]"></a>LL_ADC_SetCommonFrequencyMode</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_ADC_SetCommonFrequencyMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_SetCommonFrequencyMode
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
</UL>

<P><STRONG><a name="[12e]"></a>LL_ADC_SetCommonPathInternalCh</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_ADC_SetCommonPathInternalCh))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_SetCommonPathInternalCh
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
</UL>

<P><STRONG><a name="[4f]"></a>LL_ADC_SetCommonPathInternalCh.204</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_ADC_SetCommonPathInternalCh.204))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_SetCommonPathInternalCh.204
</UL>
<BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>

<P><STRONG><a name="[130]"></a>LL_ADC_SetOverSamplingScope</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_ADC_SetOverSamplingScope))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_SetOverSamplingScope
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
</UL>

<P><STRONG><a name="[12f]"></a>LL_ADC_SetSamplingTimeCommonChannels</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_ADC_SetSamplingTimeCommonChannels))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_ADC_SetSamplingTimeCommonChannels
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
</UL>

<P><STRONG><a name="[5a]"></a>LL_ADC_StartCalibration</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_ADC_StartCalibration))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_ADC_StartCalibration
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCal
</UL>

<P><STRONG><a name="[1af]"></a>LL_APB1_GRP1_EnableClock</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_APB1_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB1_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[141]"></a>LL_APB1_GRP1_EnableClock.10</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_APB1_GRP1_EnableClock.10))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB1_GRP1_EnableClock.10
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[14d]"></a>LL_APB1_GRP1_EnableClock.17</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_APB1_GRP1_EnableClock.17))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB1_GRP1_EnableClock.17
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[e6]"></a>LL_APB1_GRP1_ForceReset</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_APB1_GRP1_ForceReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_APB1_GRP1_ForceReset
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_DeInit
</UL>

<P><STRONG><a name="[e7]"></a>LL_APB1_GRP1_ReleaseReset</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_APB1_GRP1_ReleaseReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_APB1_GRP1_ReleaseReset
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_DeInit
</UL>

<P><STRONG><a name="[1ae]"></a>LL_APB2_GRP1_EnableClock</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_APB2_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB2_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[149]"></a>LL_APB2_GRP1_EnableClock.13</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_APB2_GRP1_EnableClock.13))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB2_GRP1_EnableClock.13
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[156]"></a>LL_APB2_GRP1_EnableClock.21</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_APB2_GRP1_EnableClock.21))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB2_GRP1_EnableClock.21
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[12b]"></a>LL_APB2_GRP1_EnableClock.5</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_APB2_GRP1_EnableClock.5))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_APB2_GRP1_EnableClock.5
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
</UL>

<P><STRONG><a name="[ab]"></a>LL_EXTI_ClearFlag_0_31</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_EXTI_ClearFlag_0_31))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_EXTI_ClearFlag_0_31
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[d6]"></a>LL_EXTI_DisableEvent_0_31</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_EXTI_DisableEvent_0_31))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_EXTI_DisableEvent_0_31
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[da]"></a>LL_EXTI_DisableFallingTrig_0_31</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_EXTI_DisableFallingTrig_0_31))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_EXTI_DisableFallingTrig_0_31
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[d8]"></a>LL_EXTI_DisableIT_0_31</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_EXTI_DisableIT_0_31))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_EXTI_DisableIT_0_31
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[10f]"></a>LL_EXTI_DisableIT_0_31.134</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_EXTI_DisableIT_0_31.134))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_EXTI_DisableIT_0_31.134
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_EnterStop
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_EnterSleep
</UL>

<P><STRONG><a name="[c8]"></a>LL_EXTI_DisableIT_0_31.88</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_EXTI_DisableIT_0_31.88))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_EXTI_DisableIT_0_31.88
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[dc]"></a>LL_EXTI_DisableRisingTrig_0_31</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_EXTI_DisableRisingTrig_0_31))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_EXTI_DisableRisingTrig_0_31
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[d9]"></a>LL_EXTI_EnableEvent_0_31</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_EXTI_EnableEvent_0_31))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_EXTI_EnableEvent_0_31
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[dd]"></a>LL_EXTI_EnableFallingTrig_0_31</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_EXTI_EnableFallingTrig_0_31))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_EXTI_EnableFallingTrig_0_31
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[d7]"></a>LL_EXTI_EnableIT_0_31</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_EXTI_EnableIT_0_31))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_EXTI_EnableIT_0_31
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[110]"></a>LL_EXTI_EnableIT_0_31.135</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_EXTI_EnableIT_0_31.135))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_EXTI_EnableIT_0_31.135
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_EnterStop
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_EnterSleep
</UL>

<P><STRONG><a name="[db]"></a>LL_EXTI_EnableRisingTrig_0_31</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_EXTI_EnableRisingTrig_0_31))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_EXTI_EnableRisingTrig_0_31
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>

<P><STRONG><a name="[d5]"></a>LL_EXTI_Init</STRONG> (Thumb, 238 bytes, Stack size 16 bytes, lto-llvm-d41ba9.o(.text.LL_EXTI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_EXTI_Init &rArr; LL_EXTI_EnableRisingTrig_0_31
</UL>
<BR>[Calls]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableRisingTrig_0_31
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableIT_0_31
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableFallingTrig_0_31
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableEvent_0_31
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableRisingTrig_0_31
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableIT_0_31
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableFallingTrig_0_31
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableEvent_0_31
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[aa]"></a>LL_EXTI_IsActiveFlag_0_31</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_EXTI_IsActiveFlag_0_31))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_EXTI_IsActiveFlag_0_31
</UL>
<BR>[Called By]<UL><LI><a href="#[b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EXTI0_1_IRQHandler
</UL>

<P><STRONG><a name="[112]"></a>LL_FLASH_EnableSleepPowerDown</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.LL_FLASH_EnableSleepPowerDown))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_EnterSleep
</UL>

<P><STRONG><a name="[18a]"></a>LL_FLASH_GetLatency</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.LL_FLASH_GetLatency))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[189]"></a>LL_FLASH_SetLatency</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_FLASH_SetLatency))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_FLASH_SetLatency
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[de]"></a>LL_GPIO_Init</STRONG> (Thumb, 184 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.LL_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinSpeed
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinPull.25
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinOutputType
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode.26
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetAFPin_8_15
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetAFPin_0_7
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
</UL>

<P><STRONG><a name="[73]"></a>LL_GPIO_IsInputPinSet</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_GPIO_IsInputPinSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_IsInputPinSet
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_WaitSET
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_WaitAll
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_ReadUP
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_ReadSET
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_ReadDOWN
</UL>

<P><STRONG><a name="[1ab]"></a>LL_GPIO_IsInputPinSet.126</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_GPIO_IsInputPinSet.126))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_IsInputPinSet.126
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_reset
</UL>

<P><STRONG><a name="[92]"></a>LL_GPIO_IsInputPinSet.177</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_GPIO_IsInputPinSet.177))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_IsInputPinSet.177
</UL>
<BR>[Called By]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_CheckBusy
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epd_wait_busy
</UL>

<P><STRONG><a name="[138]"></a>LL_GPIO_ResetOutputPin</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_GPIO_ResetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_ResetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[1ac]"></a>LL_GPIO_ResetOutputPin.127</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_GPIO_ResetOutputPin.127))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_ResetOutputPin.127
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_reset
</UL>

<P><STRONG><a name="[a5]"></a>LL_GPIO_ResetOutputPin.169</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_GPIO_ResetOutputPin.169))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_ResetOutputPin.169
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epd_send_data_multi
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epd_send_data
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epd_send_cmd
</UL>

<P><STRONG><a name="[165]"></a>LL_GPIO_ResetOutputPin.91</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_GPIO_ResetOutputPin.91))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_ResetOutputPin.91
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Enable_SHT30_I2C
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_EnableGDEH029A1
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Disable_I2C_SHT30
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_DisableGDEH029A1
</UL>

<P><STRONG><a name="[e2]"></a>LL_GPIO_SetAFPin_0_7</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, lto-llvm-d41ba9.o(.text.LL_GPIO_SetAFPin_0_7))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetAFPin_0_7
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[e3]"></a>LL_GPIO_SetAFPin_8_15</STRONG> (Thumb, 46 bytes, Stack size 12 bytes, lto-llvm-d41ba9.o(.text.LL_GPIO_SetAFPin_8_15))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetAFPin_8_15
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[139]"></a>LL_GPIO_SetOutputPin</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_GPIO_SetOutputPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_SetOutputPin
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[1a9]"></a>LL_GPIO_SetOutputPin.125</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_GPIO_SetOutputPin.125))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_SetOutputPin.125
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_reset
</UL>

<P><STRONG><a name="[a6]"></a>LL_GPIO_SetOutputPin.168</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_GPIO_SetOutputPin.168))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_SetOutputPin.168
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Init
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epd_send_data_multi
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epd_send_data
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epd_send_cmd
</UL>

<P><STRONG><a name="[166]"></a>LL_GPIO_SetOutputPin.92</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_GPIO_SetOutputPin.92))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_GPIO_SetOutputPin.92
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Enable_SHT30_I2C
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_EnableGDEH029A1
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Disable_I2C_SHT30
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_DisableGDEH029A1
</UL>

<P><STRONG><a name="[13c]"></a>LL_GPIO_SetPinMode</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, lto-llvm-d41ba9.o(.text.LL_GPIO_SetPinMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetPinMode
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[1a6]"></a>LL_GPIO_SetPinMode.122</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, lto-llvm-d41ba9.o(.text.LL_GPIO_SetPinMode.122))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetPinMode.122
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_reset
</UL>

<P><STRONG><a name="[e4]"></a>LL_GPIO_SetPinMode.26</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, lto-llvm-d41ba9.o(.text.LL_GPIO_SetPinMode.26))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetPinMode.26
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[e0]"></a>LL_GPIO_SetPinOutputType</STRONG> (Thumb, 30 bytes, Stack size 12 bytes, lto-llvm-d41ba9.o(.text.LL_GPIO_SetPinOutputType))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetPinOutputType
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[1a7]"></a>LL_GPIO_SetPinOutputType.123</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, lto-llvm-d41ba9.o(.text.LL_GPIO_SetPinOutputType.123))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetPinOutputType.123
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_reset
</UL>

<P><STRONG><a name="[13b]"></a>LL_GPIO_SetPinPull</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, lto-llvm-d41ba9.o(.text.LL_GPIO_SetPinPull))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetPinPull
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[1a8]"></a>LL_GPIO_SetPinPull.124</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, lto-llvm-d41ba9.o(.text.LL_GPIO_SetPinPull.124))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetPinPull.124
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_reset
</UL>

<P><STRONG><a name="[e1]"></a>LL_GPIO_SetPinPull.25</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, lto-llvm-d41ba9.o(.text.LL_GPIO_SetPinPull.25))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetPinPull.25
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[df]"></a>LL_GPIO_SetPinSpeed</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, lto-llvm-d41ba9.o(.text.LL_GPIO_SetPinSpeed))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_GPIO_SetPinSpeed
</UL>
<BR>[Called By]<UL><LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
</UL>

<P><STRONG><a name="[f1]"></a>LL_I2C_AcknowledgeNextData</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_I2C_AcknowledgeNextData))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_I2C_AcknowledgeNextData
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Init
</UL>

<P><STRONG><a name="[c2]"></a>LL_I2C_ClearFlag_NACK</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_I2C_ClearFlag_NACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_ClearFlag_NACK
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>

<P><STRONG><a name="[ea]"></a>LL_I2C_ConfigFilters</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, lto-llvm-d41ba9.o(.text.LL_I2C_ConfigFilters))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_I2C_ConfigFilters
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Init
</UL>

<P><STRONG><a name="[e5]"></a>LL_I2C_DeInit</STRONG> (Thumb, 88 bytes, Stack size 16 bytes, lto-llvm-d41ba9.o(.text.LL_I2C_DeInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LL_I2C_DeInit &rArr; LL_APB1_GRP1_ReleaseReset
</UL>
<BR>[Calls]<UL><LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_ReleaseReset
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_ForceReset
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_reset
</UL>

<P><STRONG><a name="[e9]"></a>LL_I2C_Disable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_I2C_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Init
</UL>

<P><STRONG><a name="[1a5]"></a>LL_I2C_Disable.121</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_I2C_Disable.121))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_Disable.121
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_reset
</UL>

<P><STRONG><a name="[169]"></a>LL_I2C_Disable.97</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_I2C_Disable.97))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_Disable.97
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Disable_I2C_SHT30
</UL>

<P><STRONG><a name="[bf]"></a>LL_I2C_DisableAutoEndMode</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_I2C_DisableAutoEndMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_DisableAutoEndMode
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>

<P><STRONG><a name="[144]"></a>LL_I2C_DisableGeneralCall</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_I2C_DisableGeneralCall))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_DisableGeneralCall
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[ed]"></a>LL_I2C_DisableOwnAddress1</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_I2C_DisableOwnAddress1))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_DisableOwnAddress1
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Init
</UL>

<P><STRONG><a name="[143]"></a>LL_I2C_DisableOwnAddress2</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_I2C_DisableOwnAddress2))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_DisableOwnAddress2
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[bd]"></a>LL_I2C_DisableReloadMode</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_I2C_DisableReloadMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_DisableReloadMode
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>

<P><STRONG><a name="[ec]"></a>LL_I2C_Enable</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_I2C_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Init
</UL>

<P><STRONG><a name="[1ad]"></a>LL_I2C_Enable.128</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_I2C_Enable.128))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_Enable.128
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_reset
</UL>

<P><STRONG><a name="[16c]"></a>LL_I2C_Enable.93</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_I2C_Enable.93))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_Enable.93
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Enable_SHT30_I2C
</UL>

<P><STRONG><a name="[142]"></a>LL_I2C_EnableAutoEndMode</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_I2C_EnableAutoEndMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_EnableAutoEndMode
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[145]"></a>LL_I2C_EnableClockStretching</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_I2C_EnableClockStretching))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_EnableClockStretching
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[ef]"></a>LL_I2C_EnableOwnAddress1</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_I2C_EnableOwnAddress1))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_EnableOwnAddress1
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Init
</UL>

<P><STRONG><a name="[c0]"></a>LL_I2C_GenerateStartCondition</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_I2C_GenerateStartCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_GenerateStartCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>

<P><STRONG><a name="[c4]"></a>LL_I2C_GenerateStopCondition</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_I2C_GenerateStopCondition))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_GenerateStopCondition
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
</UL>

<P><STRONG><a name="[e8]"></a>LL_I2C_Init</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lto-llvm-d41ba9.o(.text.LL_I2C_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LL_I2C_Init &rArr; LL_I2C_SetOwnAddress1
</UL>
<BR>[Calls]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_SetTiming
<LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_SetOwnAddress1
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_SetMode
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_EnableOwnAddress1
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Enable
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_DisableOwnAddress1
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Disable
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_ConfigFilters
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_AcknowledgeNextData
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[b8]"></a>LL_I2C_IsActiveFlag_BUSY</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_I2C_IsActiveFlag_BUSY))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_IsActiveFlag_BUSY
</UL>
<BR>[Called By]<UL><LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>

<P><STRONG><a name="[c1]"></a>LL_I2C_IsActiveFlag_NACK</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_I2C_IsActiveFlag_NACK))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_IsActiveFlag_NACK
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>

<P><STRONG><a name="[b4]"></a>LL_I2C_IsActiveFlag_RXNE</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_I2C_IsActiveFlag_RXNE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_IsActiveFlag_RXNE
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
</UL>

<P><STRONG><a name="[b9]"></a>LL_I2C_IsActiveFlag_TXE</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_I2C_IsActiveFlag_TXE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_IsActiveFlag_TXE
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>

<P><STRONG><a name="[168]"></a>LL_I2C_IsEnabled</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_I2C_IsEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Enable_SHT30_I2C
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Disable_I2C_SHT30
</UL>

<P><STRONG><a name="[1a4]"></a>LL_I2C_IsEnabled.120</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_I2C_IsEnabled.120))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_IsEnabled.120
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_reset
</UL>

<P><STRONG><a name="[b6]"></a>LL_I2C_ReceiveData8</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_I2C_ReceiveData8))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_I2C_ReceiveData8
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
</UL>

<P><STRONG><a name="[ba]"></a>LL_I2C_SetMasterAddressingMode</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_I2C_SetMasterAddressingMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_I2C_SetMasterAddressingMode
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>

<P><STRONG><a name="[f0]"></a>LL_I2C_SetMode</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_I2C_SetMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_I2C_SetMode
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Init
</UL>

<P><STRONG><a name="[ee]"></a>LL_I2C_SetOwnAddress1</STRONG> (Thumb, 36 bytes, Stack size 12 bytes, lto-llvm-d41ba9.o(.text.LL_I2C_SetOwnAddress1))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_I2C_SetOwnAddress1
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Init
</UL>

<P><STRONG><a name="[146]"></a>LL_I2C_SetOwnAddress2</STRONG> (Thumb, 40 bytes, Stack size 12 bytes, lto-llvm-d41ba9.o(.text.LL_I2C_SetOwnAddress2))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_I2C_SetOwnAddress2
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[bb]"></a>LL_I2C_SetSlaveAddr</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_I2C_SetSlaveAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_I2C_SetSlaveAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>

<P><STRONG><a name="[eb]"></a>LL_I2C_SetTiming</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_I2C_SetTiming))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_I2C_SetTiming
</UL>
<BR>[Called By]<UL><LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Init
</UL>

<P><STRONG><a name="[bc]"></a>LL_I2C_SetTransferRequest</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_I2C_SetTransferRequest))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_I2C_SetTransferRequest
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>

<P><STRONG><a name="[be]"></a>LL_I2C_SetTransferSize</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_I2C_SetTransferSize))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_I2C_SetTransferSize
</UL>
<BR>[Called By]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>

<P><STRONG><a name="[c6]"></a>LL_I2C_TransmitData8</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_I2C_TransmitData8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_I2C_TransmitData8
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
</UL>

<P><STRONG><a name="[137]"></a>LL_IOP_GRP1_EnableClock</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_IOP_GRP1_EnableClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_IOP_GRP1_EnableClock
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[14a]"></a>LL_IOP_GRP1_EnableClock.14</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_IOP_GRP1_EnableClock.14))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_IOP_GRP1_EnableClock.14
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[154]"></a>LL_IOP_GRP1_EnableClock.18</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_IOP_GRP1_EnableClock.18))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_IOP_GRP1_EnableClock.18
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[157]"></a>LL_IOP_GRP1_EnableClock.22</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_IOP_GRP1_EnableClock.22))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_IOP_GRP1_EnableClock.22
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[12c]"></a>LL_IOP_GRP1_EnableClock.6</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_IOP_GRP1_EnableClock.6))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_IOP_GRP1_EnableClock.6
</UL>
<BR>[Called By]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_ADC_Init
</UL>

<P><STRONG><a name="[140]"></a>LL_IOP_GRP1_EnableClock.9</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_IOP_GRP1_EnableClock.9))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_IOP_GRP1_EnableClock.9
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
</UL>

<P><STRONG><a name="[f2]"></a>LL_Init1msTick</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, lto-llvm-d41ba9.o(.text.LL_Init1msTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LL_Init1msTick &rArr; LL_InitTick &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_InitTick
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[f3]"></a>LL_InitTick</STRONG> (Thumb, 56 bytes, Stack size 16 bytes, lto-llvm-d41ba9.o(.text.LL_InitTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LL_InitTick &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init1msTick
</UL>

<P><STRONG><a name="[119]"></a>LL_LPM_EnableDeepSleep</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.LL_LPM_EnableDeepSleep))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_EnterStop
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_EnterStandby
</UL>

<P><STRONG><a name="[111]"></a>LL_LPM_EnableSleep</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.LL_LPM_EnableSleep))
<BR><BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_EnterSleep
</UL>

<P><STRONG><a name="[115]"></a>LL_PWR_ClearFlag_SB</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.LL_PWR_ClearFlag_SB))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_GetResetInfo
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_EnterStandby
</UL>

<P><STRONG><a name="[114]"></a>LL_PWR_ClearFlag_WU</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.LL_PWR_ClearFlag_WU))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_EnterStop
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_EnterStandby
</UL>

<P><STRONG><a name="[6c]"></a>LL_PWR_DisableBkUpAccess</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.LL_PWR_DisableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKPR_WriteDWORD
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKPR_ResetAll
</UL>

<P><STRONG><a name="[11d]"></a>LL_PWR_DisableUltraLowPower</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.LL_PWR_DisableUltraLowPower))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_EnterStop
</UL>

<P><STRONG><a name="[113]"></a>LL_PWR_DisableWakeUpPin</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_PWR_DisableWakeUpPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_PWR_DisableWakeUpPin
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_EnterStop
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_EnterStandby
</UL>

<P><STRONG><a name="[69]"></a>LL_PWR_EnableBkUpAccess</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.LL_PWR_EnableBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKPR_WriteDWORD
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKPR_ResetAll
</UL>

<P><STRONG><a name="[117]"></a>LL_PWR_EnableUltraLowPower</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.LL_PWR_EnableUltraLowPower))
<BR><BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_EnterStop
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_EnterStandby
</UL>

<P><STRONG><a name="[116]"></a>LL_PWR_EnableWakeUpPin</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_PWR_EnableWakeUpPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_PWR_EnableWakeUpPin
</UL>
<BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_EnterStandby
</UL>

<P><STRONG><a name="[11f]"></a>LL_PWR_IsActiveFlag_SB</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.LL_PWR_IsActiveFlag_SB))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_GetResetInfo
</UL>

<P><STRONG><a name="[68]"></a>LL_PWR_IsEnabledBkUpAccess</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.LL_PWR_IsEnabledBkUpAccess))
<BR><BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKPR_WriteDWORD
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKPR_ResetAll
</UL>

<P><STRONG><a name="[118]"></a>LL_PWR_SetPowerMode</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_PWR_SetPowerMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_PWR_SetPowerMode
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_EnterStop
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_EnterStandby
</UL>

<P><STRONG><a name="[11c]"></a>LL_PWR_SetRegulModeLP</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_PWR_SetRegulModeLP))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_PWR_SetRegulModeLP
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_EnterStop
</UL>

<P><STRONG><a name="[18b]"></a>LL_PWR_SetRegulVoltageScaling</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_PWR_SetRegulVoltageScaling))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_PWR_SetRegulVoltageScaling
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[120]"></a>LL_RCC_ClearResetFlags.131</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.LL_RCC_ClearResetFlags.131))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_GetResetInfo
</UL>

<P><STRONG><a name="[6a]"></a>LL_RCC_ForceBackupDomainReset</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.LL_RCC_ForceBackupDomainReset))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKPR_ResetAll
</UL>

<P><STRONG><a name="[16d]"></a>LL_RCC_GetAHBPrescaler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.LL_RCC_GetAHBPrescaler))
<BR><BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
</UL>

<P><STRONG><a name="[16e]"></a>LL_RCC_GetAPB1Prescaler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.LL_RCC_GetAPB1Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
</UL>

<P><STRONG><a name="[16f]"></a>LL_RCC_GetAPB2Prescaler</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.LL_RCC_GetAPB2Prescaler))
<BR><BR>[Called By]<UL><LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK2ClockFreq
</UL>

<P><STRONG><a name="[193]"></a>LL_RCC_GetSysClkSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.LL_RCC_GetSysClkSource))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[170]"></a>LL_RCC_GetSysClkSource.32</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.LL_RCC_GetSysClkSource.32))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[f4]"></a>LL_RCC_GetUSARTClockFreq</STRONG> (Thumb, 280 bytes, Stack size 16 bytes, lto-llvm-d41ba9.o(.text.LL_RCC_GetUSARTClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK2ClockFreq
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetPCLK1ClockFreq
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetHCLKClockFreq
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_LSE_IsReady
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_IsActiveFlag_HSIDIV
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_IsReady.33
<LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[f5]"></a>LL_RCC_GetUSARTClockSource</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_RCC_GetUSARTClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RCC_GetUSARTClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[18c]"></a>LL_RCC_HSI_Enable</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.LL_RCC_HSI_Enable))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[18d]"></a>LL_RCC_HSI_IsReady</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.LL_RCC_HSI_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[f7]"></a>LL_RCC_HSI_IsReady.33</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.LL_RCC_HSI_IsReady.33))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[18e]"></a>LL_RCC_HSI_SetCalibTrimming</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_RCC_HSI_SetCalibTrimming))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RCC_HSI_SetCalibTrimming
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[f8]"></a>LL_RCC_IsActiveFlag_HSIDIV</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.LL_RCC_IsActiveFlag_HSIDIV))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[11e]"></a>LL_RCC_IsActiveFlag_PORRST</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.LL_RCC_IsActiveFlag_PORRST))
<BR><BR>[Called By]<UL><LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_GetResetInfo
</UL>

<P><STRONG><a name="[f9]"></a>LL_RCC_LSE_IsReady</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.LL_RCC_LSE_IsReady))
<BR><BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[171]"></a>LL_RCC_MSI_GetRange</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.LL_RCC_MSI_GetRange))
<BR><BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[175]"></a>LL_RCC_PLL_GetDivider</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.LL_RCC_PLL_GetDivider))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>

<P><STRONG><a name="[173]"></a>LL_RCC_PLL_GetMainSource</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.LL_RCC_PLL_GetMainSource))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>

<P><STRONG><a name="[174]"></a>LL_RCC_PLL_GetMultiplicator</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.LL_RCC_PLL_GetMultiplicator))
<BR><BR>[Called By]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
</UL>

<P><STRONG><a name="[6b]"></a>LL_RCC_ReleaseBackupDomainReset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.LL_RCC_ReleaseBackupDomainReset))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKPR_ResetAll
</UL>

<P><STRONG><a name="[18f]"></a>LL_RCC_SetAHBPrescaler</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_RCC_SetAHBPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RCC_SetAHBPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[190]"></a>LL_RCC_SetAPB1Prescaler</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_RCC_SetAPB1Prescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RCC_SetAPB1Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[191]"></a>LL_RCC_SetAPB2Prescaler</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_RCC_SetAPB2Prescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RCC_SetAPB2Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[11b]"></a>LL_RCC_SetClkAfterWakeFromStop</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_RCC_SetClkAfterWakeFromStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RCC_SetClkAfterWakeFromStop
</UL>
<BR>[Called By]<UL><LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_EnterStop
</UL>

<P><STRONG><a name="[196]"></a>LL_RCC_SetI2CClockSource</STRONG> (Thumb, 48 bytes, Stack size 12 bytes, lto-llvm-d41ba9.o(.text.LL_RCC_SetI2CClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_RCC_SetI2CClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[192]"></a>LL_RCC_SetSysClkSource</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_RCC_SetSysClkSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RCC_SetSysClkSource
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[195]"></a>LL_RCC_SetUSARTClockSource</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_RCC_SetUSARTClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_RCC_SetUSARTClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[1b1]"></a>LL_SPI_ClearFlag_OVR</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_SPI_ClearFlag_OVR))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_SPI_ClearFlag_OVR
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_data
</UL>

<P><STRONG><a name="[164]"></a>LL_SPI_Disable</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_SPI_Disable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_SPI_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_DisableGDEH029A1
</UL>

<P><STRONG><a name="[16b]"></a>LL_SPI_Enable</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_SPI_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_SPI_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_EnableGDEH029A1
</UL>

<P><STRONG><a name="[fd]"></a>LL_SPI_Init</STRONG> (Thumb, 152 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.LL_SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_SPI_Init &rArr; LL_SPI_SetCRCPolynomial
</UL>
<BR>[Calls]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_SetCRCPolynomial
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[1b4]"></a>LL_SPI_IsActiveFlag_BSY</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_SPI_IsActiveFlag_BSY))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_SPI_IsActiveFlag_BSY
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_data
</UL>

<P><STRONG><a name="[1b5]"></a>LL_SPI_IsActiveFlag_OVR</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_SPI_IsActiveFlag_OVR))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_SPI_IsActiveFlag_OVR
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_data
</UL>

<P><STRONG><a name="[1b2]"></a>LL_SPI_IsActiveFlag_TXE</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_SPI_IsActiveFlag_TXE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_SPI_IsActiveFlag_TXE
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_data
</UL>

<P><STRONG><a name="[fe]"></a>LL_SPI_IsEnabled</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_SPI_IsEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_SPI_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Init
</UL>

<P><STRONG><a name="[163]"></a>LL_SPI_IsEnabled.90</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_SPI_IsEnabled.90))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_SPI_IsEnabled.90
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_EnableGDEH029A1
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_DisableGDEH029A1
</UL>

<P><STRONG><a name="[ff]"></a>LL_SPI_SetCRCPolynomial</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_SPI_SetCRCPolynomial))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_SPI_SetCRCPolynomial
</UL>
<BR>[Called By]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Init
</UL>

<P><STRONG><a name="[14b]"></a>LL_SPI_SetStandard</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_SPI_SetStandard))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_SPI_SetStandard
</UL>
<BR>[Called By]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_SPI1_Init
</UL>

<P><STRONG><a name="[1b3]"></a>LL_SPI_TransmitData8</STRONG> (Thumb, 32 bytes, Stack size 12 bytes, lto-llvm-d41ba9.o(.text.LL_SPI_TransmitData8))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LL_SPI_TransmitData8
</UL>
<BR>[Called By]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_data
</UL>

<P><STRONG><a name="[13a]"></a>LL_SYSCFG_SetEXTISource</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lto-llvm-d41ba9.o(.text.LL_SYSCFG_SetEXTISource))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_SYSCFG_SetEXTISource
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[1b0]"></a>LL_SYSCFG_VREFINT_SetConnection</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_SYSCFG_VREFINT_SetConnection))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_SYSCFG_VREFINT_SetConnection
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[c9]"></a>LL_SYSCFG_VREFINT_SetConnection.89</STRONG> (Thumb, 28 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_SYSCFG_VREFINT_SetConnection.89))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_SYSCFG_VREFINT_SetConnection.89
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[194]"></a>LL_SetSystemCoreClock</STRONG> (Thumb, 24 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_SetSystemCoreClock))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_SetSystemCoreClock
</UL>
<BR>[Called By]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemClock_Config
</UL>

<P><STRONG><a name="[79]"></a>LL_TIM_CC_DisableChannel</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_TIM_CC_DisableChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_CC_DisableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_Enable
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_Beep
</UL>

<P><STRONG><a name="[78]"></a>LL_TIM_CC_EnableChannel</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_TIM_CC_EnableChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_CC_EnableChannel
</UL>
<BR>[Called By]<UL><LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_Beep
</UL>

<P><STRONG><a name="[14e]"></a>LL_TIM_DisableARRPreload</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_TIM_DisableARRPreload))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_TIM_DisableARRPreload
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[153]"></a>LL_TIM_DisableMasterSlaveMode</STRONG> (Thumb, 22 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_TIM_DisableMasterSlaveMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_TIM_DisableMasterSlaveMode
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[7c]"></a>LL_TIM_EnableCounter</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_TIM_EnableCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_TIM_EnableCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_Enable
</UL>

<P><STRONG><a name="[103]"></a>LL_TIM_GenerateEvent_UPDATE</STRONG> (Thumb, 18 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_TIM_GenerateEvent_UPDATE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_TIM_GenerateEvent_UPDATE
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>

<P><STRONG><a name="[80]"></a>LL_TIM_GetAutoReload</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_TIM_GetAutoReload))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_TIM_GetAutoReload
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_SetVolume
</UL>

<P><STRONG><a name="[7f]"></a>LL_TIM_GetCounter</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_TIM_GetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_TIM_GetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_SetFrqe
</UL>

<P><STRONG><a name="[100]"></a>LL_TIM_Init</STRONG> (Thumb, 156 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.LL_TIM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = LL_TIM_Init &rArr; LL_TIM_SetPrescaler
</UL>
<BR>[Calls]<UL><LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetPrescaler
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetAutoReload
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_GenerateEvent_UPDATE
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[151]"></a>LL_TIM_OC_DisableFast</STRONG> (Thumb, 96 bytes, Stack size 16 bytes, lto-llvm-d41ba9.o(.text.LL_TIM_OC_DisableFast))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_TIM_OC_DisableFast
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[150]"></a>LL_TIM_OC_EnablePreload</STRONG> (Thumb, 104 bytes, Stack size 16 bytes, lto-llvm-d41ba9.o(.text.LL_TIM_OC_EnablePreload))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LL_TIM_OC_EnablePreload
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[104]"></a>LL_TIM_OC_Init</STRONG> (Thumb, 124 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.LL_TIM_OC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = LL_TIM_OC_Init &rArr; OC4Config &rArr; LL_TIM_OC_SetCompareCH4
</UL>
<BR>[Calls]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC4Config
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC3Config
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC2Config
<LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC1Config
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[15f]"></a>LL_TIM_OC_SetCompareCH1</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_TIM_OC_SetCompareCH1))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_OC_SetCompareCH1
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC1Config
</UL>

<P><STRONG><a name="[160]"></a>LL_TIM_OC_SetCompareCH2</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_TIM_OC_SetCompareCH2))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_OC_SetCompareCH2
</UL>
<BR>[Called By]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC2Config
</UL>

<P><STRONG><a name="[161]"></a>LL_TIM_OC_SetCompareCH3</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_TIM_OC_SetCompareCH3))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_OC_SetCompareCH3
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC3Config
</UL>

<P><STRONG><a name="[82]"></a>LL_TIM_OC_SetCompareCH3.219</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_TIM_OC_SetCompareCH3.219))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_OC_SetCompareCH3.219
</UL>
<BR>[Called By]<UL><LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_SetVolume
</UL>

<P><STRONG><a name="[162]"></a>LL_TIM_OC_SetCompareCH4</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_TIM_OC_SetCompareCH4))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_OC_SetCompareCH4
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;OC4Config
</UL>

<P><STRONG><a name="[101]"></a>LL_TIM_SetAutoReload</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_TIM_SetAutoReload))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_SetAutoReload
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>

<P><STRONG><a name="[7e]"></a>LL_TIM_SetAutoReload.222</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_TIM_SetAutoReload.222))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_SetAutoReload.222
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_SetFrqe
</UL>

<P><STRONG><a name="[14f]"></a>LL_TIM_SetClockSource</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_TIM_SetClockSource))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_SetClockSource
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[7b]"></a>LL_TIM_SetCounter</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_TIM_SetCounter))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_SetCounter
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_SetFrqe
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_Enable
</UL>

<P><STRONG><a name="[102]"></a>LL_TIM_SetPrescaler</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_TIM_SetPrescaler))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_SetPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
</UL>

<P><STRONG><a name="[152]"></a>LL_TIM_SetTriggerOutput</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_TIM_SetTriggerOutput))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_TIM_SetTriggerOutput
</UL>
<BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_TIM2_Init
</UL>

<P><STRONG><a name="[185]"></a>LL_USART_ClearFlag_TC</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_USART_ClearFlag_TC))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_USART_ClearFlag_TC
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_SendData
</UL>

<P><STRONG><a name="[158]"></a>LL_USART_ConfigAsyncMode</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_USART_ConfigAsyncMode))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_USART_ConfigAsyncMode
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[159]"></a>LL_USART_Enable</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_USART_Enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_USART_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[109]"></a>LL_USART_Init</STRONG> (Thumb, 180 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.LL_USART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 92<LI>Call Chain = LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetStopBitsLength
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetHWFlowCtrl
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_SetBaudRate
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsEnabled
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>
<BR>[Called By]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_USART1_UART_Init
</UL>

<P><STRONG><a name="[187]"></a>LL_USART_IsActiveFlag_TC</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_USART_IsActiveFlag_TC))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_USART_IsActiveFlag_TC
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_SendData
</UL>

<P><STRONG><a name="[184]"></a>LL_USART_IsActiveFlag_TXE</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_USART_IsActiveFlag_TXE))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_USART_IsActiveFlag_TXE
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_SendData
</UL>

<P><STRONG><a name="[10a]"></a>LL_USART_IsEnabled</STRONG> (Thumb, 16 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.LL_USART_IsEnabled))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = LL_USART_IsEnabled
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[10d]"></a>LL_USART_SetBaudRate</STRONG> (Thumb, 100 bytes, Stack size 32 bytes, lto-llvm-d41ba9.o(.text.LL_USART_SetBaudRate))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = LL_USART_SetBaudRate &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[10c]"></a>LL_USART_SetHWFlowCtrl</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_USART_SetHWFlowCtrl))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_SetHWFlowCtrl
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[10b]"></a>LL_USART_SetStopBitsLength</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_USART_SetStopBitsLength))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_SetStopBitsLength
</UL>
<BR>[Called By]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
</UL>

<P><STRONG><a name="[186]"></a>LL_USART_TransmitData8</STRONG> (Thumb, 24 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_USART_TransmitData8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_USART_TransmitData8
</UL>
<BR>[Called By]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_SendData
</UL>

<P><STRONG><a name="[74]"></a>LL_mDelay</STRONG> (Thumb, 72 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LL_mDelay))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = LL_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FullInit
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_Beep
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_WaitSET
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_WaitAll
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_ReadUP
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_ReadSET
<LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_ReadDOWN
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_reset
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_SoftReset
<LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Enable_SHT30_I2C
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[10e]"></a>LP_EnterSleep</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lto-llvm-d41ba9.o(.text.LP_EnterSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = LP_EnterSleep &rArr; LL_EXTI_EnableIT_0_31.135
</UL>
<BR>[Calls]<UL><LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPM_EnableSleep
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_EnableSleepPowerDown
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableIT_0_31.135
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableIT_0_31.134
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
</UL>

<P><STRONG><a name="[d1]"></a>LP_EnterStandby</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.LP_EnterStandby))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = LP_EnterStandby &rArr; LL_PWR_SetPowerMode
</UL>
<BR>[Calls]<UL><LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_SetPowerMode
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_EnableWakeUpPin
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_EnableUltraLowPower
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_DisableWakeUpPin
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_ClearFlag_WU
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_ClearFlag_SB
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPM_EnableDeepSleep
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[11a]"></a>LP_EnterStop</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.LP_EnterStop))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = LP_EnterStop &rArr; LL_RCC_SetClkAfterWakeFromStop
</UL>
<BR>[Calls]<UL><LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetClkAfterWakeFromStop
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_SetRegulModeLP
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_SetPowerMode
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_EnableUltraLowPower
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_DisableWakeUpPin
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_DisableUltraLowPower
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_ClearFlag_WU
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LPM_EnableDeepSleep
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_EnableIT_0_31.135
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_DisableIT_0_31.134
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SetTime
</UL>

<P><STRONG><a name="[ca]"></a>LP_GetResetInfo</STRONG> (Thumb, 92 bytes, Stack size 16 bytes, lto-llvm-d41ba9.o(.text.LP_GetResetInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = LP_GetResetInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_IsActiveFlag_PORRST
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_ClearResetFlags.131
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_IsActiveFlag_SB
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_ClearFlag_SB
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[121]"></a>LUNAR_SolarToLunar</STRONG> (Thumb, 524 bytes, Stack size 104 bytes, lto-llvm-d41ba9.o(.text.LUNAR_SolarToLunar))
<BR><BR>[Stack]<UL><LI>Max Depth = 156<LI>Call Chain = LUNAR_SolarToLunar &rArr; SolarToInt &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GetBitInt
<LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SolarToInt
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
</UL>

<P><STRONG><a name="[124]"></a>Loop</STRONG> (Thumb, 232 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.Loop))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = Loop &rArr; Menu_MainMenu &rArr; Menu_SetTime &rArr; BTN_ModifySingleDigit &rArr; BEEP_Button &rArr; BUZZER_SetVolume &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_WaitSET
<LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKPR_ResetAll
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SERIAL_DebugPrint
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetOSF
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetA2F
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearA2F
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SystemReset.96
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SetTime
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_MainMenu
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_EnterStandby
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[12a]"></a>MX_ADC_Init</STRONG> (Thumb, 228 bytes, Stack size 80 bytes, lto-llvm-d41ba9.o(.text.MX_ADC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = MX_ADC_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IOP_GRP1_EnableClock.6
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock.5
<LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetSamplingTimeCommonChannels
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetOverSamplingScope
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetCommonPathInternalCh
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_SetCommonFrequencyMode
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_SetSequencerScanDirection
<LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_SetSequencerChAdd
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_REG_Init
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_Init
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_EnableInternalRegulator
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_DisableIT_EOS
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_ADC_DisableIT_EOC
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[136]"></a>MX_GPIO_Init</STRONG> (Thumb, 488 bytes, Stack size 104 bytes, lto-llvm-d41ba9.o(.text.MX_GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 140<LI>Call Chain = MX_GPIO_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_EnableIRQ
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SYSCFG_SetEXTISource
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IOP_GRP1_EnableClock
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinPull
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_EXTI_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[13f]"></a>MX_I2C1_Init</STRONG> (Thumb, 152 bytes, Stack size 80 bytes, lto-llvm-d41ba9.o(.text.MX_I2C1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 116<LI>Call Chain = MX_I2C1_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IOP_GRP1_EnableClock.9
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_SetOwnAddress2
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Init
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_EnableClockStretching
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_EnableAutoEndMode
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_DisableOwnAddress2
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_DisableGeneralCall
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock.10
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_reset
<LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[147]"></a>MX_SPI1_Init</STRONG> (Thumb, 140 bytes, Stack size 96 bytes, lto-llvm-d41ba9.o(.text.MX_SPI1_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 132<LI>Call Chain = MX_SPI1_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_SetStandard
<LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Init
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IOP_GRP1_EnableClock.14
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock.13
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[14c]"></a>MX_TIM2_Init</STRONG> (Thumb, 132 bytes, Stack size 72 bytes, lto-llvm-d41ba9.o(.text.MX_TIM2_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 136<LI>Call Chain = MX_TIM2_Init &rArr; LL_TIM_OC_Init &rArr; OC4Config &rArr; LL_TIM_OC_SetCompareCH4
</UL>
<BR>[Calls]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetTriggerOutput
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_SetClockSource
<LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_EnablePreload
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_DisableFast
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_Init
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_DisableMasterSlaveMode
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_DisableARRPreload
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IOP_GRP1_EnableClock.18
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB1_GRP1_EnableClock.17
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[155]"></a>MX_USART1_UART_Init</STRONG> (Thumb, 148 bytes, Stack size 88 bytes, lto-llvm-d41ba9.o(.text.MX_USART1_UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 180<LI>Call Chain = MX_USART1_UART_Init &rArr; LL_USART_Init &rArr; LL_RCC_GetUSARTClockFreq &rArr; RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Init
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_Enable
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ConfigAsyncMode
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_IOP_GRP1_EnableClock.22
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_Init
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_APB2_GRP1_EnableClock.21
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[127]"></a>Menu_MainMenu</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.Menu_MainMenu))
<BR><BR>[Stack]<UL><LI>Max Depth = 456<LI>Call Chain = Menu_MainMenu &rArr; Menu_SetTime &rArr; BTN_ModifySingleDigit &rArr; BEEP_Button &rArr; BUZZER_SetVolume &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SetTime
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
</UL>

<P><STRONG><a name="[ce]"></a>Menu_SetTime</STRONG> (Thumb, 1980 bytes, Stack size 80 bytes, lto-llvm-d41ba9.o(.text.Menu_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 448<LI>Call Chain = Menu_SetTime &rArr; BTN_ModifySingleDigit &rArr; BEEP_Button &rArr; BUZZER_SetVolume &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Show
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_EnterSleep
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_DrawUTF8
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_DrawImage
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_DrawHLine
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_ClearRAM
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_ClearArea
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_CheckBusy
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_WaitAll
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_ReadUP
<LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_ReadSET
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTN_ModifySingleDigit
<LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_OK
<LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BEEP_Button
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetOSF
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearOSF
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_EnableGDEH029A1
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_DisableGDEH029A1
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_EnterStop
</UL>
<BR>[Called By]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_MainMenu
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[13e]"></a>NVIC_EnableIRQ</STRONG> (Thumb, 32 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.NVIC_EnableIRQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = NVIC_EnableIRQ
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[13d]"></a>NVIC_SetPriority</STRONG> (Thumb, 136 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.NVIC_SetPriority))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_GPIO_Init
</UL>

<P><STRONG><a name="[b2]"></a>NVIC_SystemReset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.NVIC_SystemReset))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[129]"></a>NVIC_SystemReset.96</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, lto-llvm-d41ba9.o(.text.NVIC_SystemReset.96))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
</UL>

<P><STRONG><a name="[105]"></a>OC1Config</STRONG> (Thumb, 118 bytes, Stack size 32 bytes, lto-llvm-d41ba9.o(.text.OC1Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OC1Config &rArr; LL_TIM_OC_SetCompareCH1
</UL>
<BR>[Calls]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetCompareCH1
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[106]"></a>OC2Config</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, lto-llvm-d41ba9.o(.text.OC2Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OC2Config &rArr; LL_TIM_OC_SetCompareCH2
</UL>
<BR>[Calls]<UL><LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetCompareCH2
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[107]"></a>OC3Config</STRONG> (Thumb, 128 bytes, Stack size 32 bytes, lto-llvm-d41ba9.o(.text.OC3Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OC3Config &rArr; LL_TIM_OC_SetCompareCH3
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetCompareCH3
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[108]"></a>OC4Config</STRONG> (Thumb, 132 bytes, Stack size 32 bytes, lto-llvm-d41ba9.o(.text.OC4Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = OC4Config &rArr; LL_TIM_OC_SetCompareCH4
</UL>
<BR>[Calls]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_SetCompareCH4
</UL>
<BR>[Called By]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_TIM_OC_Init
</UL>

<P><STRONG><a name="[15e]"></a>Power_DisableGDEH029A1</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.Power_DisableGDEH029A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Power_DisableGDEH029A1 &rArr; LL_GPIO_SetOutputPin.92
</UL>
<BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_IsEnabled.90
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Disable
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin.92
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin.91
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SetTime
</UL>

<P><STRONG><a name="[167]"></a>Power_Disable_I2C_SHT30</STRONG> (Thumb, 52 bytes, Stack size 16 bytes, lto-llvm-d41ba9.o(.text.Power_Disable_I2C_SHT30))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Power_Disable_I2C_SHT30 &rArr; LL_GPIO_SetOutputPin.92
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsEnabled
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Disable.97
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin.92
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin.91
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
</UL>

<P><STRONG><a name="[cc]"></a>Power_EnableADC</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.Power_EnableADC))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = Power_EnableADC &rArr; ADC_Enable &rArr; LL_ADC_SetCommonPathInternalCh.204
</UL>
<BR>[Calls]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCal
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
<LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Disable
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[cd]"></a>Power_EnableBUZZER</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.Power_EnableBUZZER))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = Power_EnableBUZZER &rArr; BUZZER_Enable &rArr; LL_TIM_SetCounter
</UL>
<BR>[Calls]<UL><LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BUZZER_Enable
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[15a]"></a>Power_EnableGDEH029A1</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.Power_EnableGDEH029A1))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Power_EnableGDEH029A1 &rArr; LL_GPIO_SetOutputPin.92
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_100ns
<LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_IsEnabled.90
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_Enable
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin.92
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin.91
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SetTime
</UL>

<P><STRONG><a name="[cb]"></a>Power_Enable_SHT30_I2C</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.Power_Enable_SHT30_I2C))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = Power_Enable_SHT30_I2C &rArr; LL_mDelay
</UL>
<BR>[Calls]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_100ns
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
<LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsEnabled
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Enable.93
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin.92
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin.91
</UL>
<BR>[Called By]<UL><LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[fa]"></a>RCC_GetHCLKClockFreq</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lto-llvm-d41ba9.o(.text.RCC_GetHCLKClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetHCLKClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetAHBPrescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[fc]"></a>RCC_GetPCLK1ClockFreq</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lto-llvm-d41ba9.o(.text.RCC_GetPCLK1ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetPCLK1ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetAPB1Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[fb]"></a>RCC_GetPCLK2ClockFreq</STRONG> (Thumb, 32 bytes, Stack size 16 bytes, lto-llvm-d41ba9.o(.text.RCC_GetPCLK2ClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = RCC_GetPCLK2ClockFreq
</UL>
<BR>[Calls]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetAPB2Prescaler
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[f6]"></a>RCC_GetSystemClockFreq</STRONG> (Thumb, 116 bytes, Stack size 16 bytes, lto-llvm-d41ba9.o(.text.RCC_GetSystemClockFreq))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = RCC_GetSystemClockFreq &rArr; RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_PLL_GetFreqDomain_SYS
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_MSI_GetRange
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_IsActiveFlag_HSIDIV
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource.32
</UL>
<BR>[Called By]<UL><LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetUSARTClockFreq
</UL>

<P><STRONG><a name="[172]"></a>RCC_PLL_GetFreqDomain_SYS</STRONG> (Thumb, 96 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.RCC_PLL_GetFreqDomain_SYS))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = RCC_PLL_GetFreqDomain_SYS &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetMultiplicator
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetMainSource
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_PLL_GetDivider
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_IsActiveFlag_HSIDIV
</UL>
<BR>[Called By]<UL><LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RCC_GetSystemClockFreq
</UL>

<P><STRONG><a name="[d0]"></a>RTC_ClearA1F</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.RTC_ClearA1F))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = RTC_ClearA1F &rArr; RTC_ModifyREG &rArr; RTC_WriteREG &rArr; I2C_Start &rArr; i2c_reset &rArr; MX_I2C1_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ModifyREG
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[cf]"></a>RTC_ClearA2F</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.RTC_ClearA2F))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = RTC_ClearA2F &rArr; RTC_ModifyREG &rArr; RTC_WriteREG &rArr; I2C_Start &rArr; i2c_reset &rArr; MX_I2C1_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ModifyREG
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[15d]"></a>RTC_ClearOSF</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.RTC_ClearOSF))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = RTC_ClearOSF &rArr; RTC_ModifyREG &rArr; RTC_WriteREG &rArr; I2C_Start &rArr; i2c_reset &rArr; MX_I2C1_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ModifyREG
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SetTime
</UL>

<P><STRONG><a name="[126]"></a>RTC_GetA2F</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.RTC_GetA2F))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = RTC_GetA2F &rArr; RTC_TestREG &rArr; RTC_ReadREG &rArr; I2C_Start &rArr; i2c_reset &rArr; MX_I2C1_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TestREG
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
</UL>

<P><STRONG><a name="[125]"></a>RTC_GetOSF</STRONG> (Thumb, 10 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.RTC_GetOSF))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = RTC_GetOSF &rArr; RTC_TestREG &rArr; RTC_ReadREG &rArr; I2C_Start &rArr; i2c_reset &rArr; MX_I2C1_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TestREG
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SetTime
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
</UL>

<P><STRONG><a name="[15b]"></a>RTC_GetTime</STRONG> (Thumb, 330 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.RTC_GetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = RTC_GetTime &rArr; RTC_ReadREG_Multi &rArr; I2C_Start &rArr; i2c_reset &rArr; MX_I2C1_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bcd_to_bin
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadREG_Multi
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SetTime
</UL>

<P><STRONG><a name="[17a]"></a>RTC_ModifyA1IE</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lto-llvm-d41ba9.o(.text.RTC_ModifyA1IE))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = RTC_ModifyA1IE &rArr; RTC_ModifyREG &rArr; RTC_WriteREG &rArr; I2C_Start &rArr; i2c_reset &rArr; MX_I2C1_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ModifyREG
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
</UL>

<P><STRONG><a name="[17b]"></a>RTC_ModifyA2IE</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lto-llvm-d41ba9.o(.text.RTC_ModifyA2IE))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = RTC_ModifyA2IE &rArr; RTC_ModifyREG &rArr; RTC_WriteREG &rArr; I2C_Start &rArr; i2c_reset &rArr; MX_I2C1_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ModifyREG
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
</UL>

<P><STRONG><a name="[17c]"></a>RTC_ModifyAM1Mask</STRONG> (Thumb, 126 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.RTC_ModifyAM1Mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = RTC_ModifyAM1Mask &rArr; RTC_ModifyREG &rArr; RTC_WriteREG &rArr; I2C_Start &rArr; i2c_reset &rArr; MX_I2C1_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ModifyREG
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
</UL>

<P><STRONG><a name="[17d]"></a>RTC_ModifyAM2Mask</STRONG> (Thumb, 128 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.RTC_ModifyAM2Mask))
<BR><BR>[Stack]<UL><LI>Max Depth = 260<LI>Call Chain = RTC_ModifyAM2Mask &rArr; RTC_ModifyREG &rArr; RTC_WriteREG &rArr; I2C_Start &rArr; i2c_reset &rArr; MX_I2C1_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ModifyREG
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
</UL>

<P><STRONG><a name="[17e]"></a>RTC_ModifyEOSC</STRONG> (Thumb, 50 bytes, Stack size 16 bytes, lto-llvm-d41ba9.o(.text.RTC_ModifyEOSC))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = RTC_ModifyEOSC &rArr; RTC_ModifyREG &rArr; RTC_WriteREG &rArr; I2C_Start &rArr; i2c_reset &rArr; MX_I2C1_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ModifyREG
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
</UL>

<P><STRONG><a name="[17f]"></a>RTC_ModifyINTCN</STRONG> (Thumb, 48 bytes, Stack size 16 bytes, lto-llvm-d41ba9.o(.text.RTC_ModifyINTCN))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = RTC_ModifyINTCN &rArr; RTC_ModifyREG &rArr; RTC_WriteREG &rArr; I2C_Start &rArr; i2c_reset &rArr; MX_I2C1_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ModifyREG
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
</UL>

<P><STRONG><a name="[176]"></a>RTC_ModifyREG</STRONG> (Thumb, 84 bytes, Stack size 32 bytes, lto-llvm-d41ba9.o(.text.RTC_ModifyREG))
<BR><BR>[Stack]<UL><LI>Max Depth = 236<LI>Call Chain = RTC_ModifyREG &rArr; RTC_WriteREG &rArr; I2C_Start &rArr; i2c_reset &rArr; MX_I2C1_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteREG
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadREG
</UL>
<BR>[Called By]<UL><LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ModifyINTCN
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ModifyEOSC
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ModifyAM2Mask
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ModifyAM1Mask
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ModifyA2IE
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ModifyA1IE
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearOSF
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearA2F
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearA1F
</UL>

<P><STRONG><a name="[8b]"></a>RTC_ReadREG</STRONG> (Thumb, 90 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.RTC_ReadREG))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = RTC_ReadREG &rArr; I2C_Start &rArr; i2c_reset &rArr; MX_I2C1_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpRTCReg
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_TestREG
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ModifyREG
</UL>

<P><STRONG><a name="[178]"></a>RTC_ReadREG_Multi</STRONG> (Thumb, 138 bytes, Stack size 32 bytes, lto-llvm-d41ba9.o(.text.RTC_ReadREG_Multi))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = RTC_ReadREG_Multi &rArr; I2C_Start &rArr; i2c_reset &rArr; MX_I2C1_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
</UL>

<P><STRONG><a name="[b0]"></a>RTC_ResetAllRegToDefault</STRONG> (Thumb, 36 bytes, Stack size 40 bytes, lto-llvm-d41ba9.o(.text.RTC_ResetAllRegToDefault))
<BR><BR>[Stack]<UL><LI>Max Depth = 252<LI>Call Chain = RTC_ResetAllRegToDefault &rArr; RTC_WriteREG_Multi &rArr; I2C_Start &rArr; i2c_reset &rArr; MX_I2C1_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteREG_Multi
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FullInit
</UL>

<P><STRONG><a name="[15c]"></a>RTC_SetTime</STRONG> (Thumb, 264 bytes, Stack size 40 bytes, lto-llvm-d41ba9.o(.text.RTC_SetTime))
<BR><BR>[Stack]<UL><LI>Max Depth = 292<LI>Call Chain = RTC_SetTime &rArr; RTC_ModifyEOSC &rArr; RTC_ModifyREG &rArr; RTC_WriteREG &rArr; I2C_Start &rArr; i2c_reset &rArr; MX_I2C1_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;bin_to_bcd
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_WriteREG_Multi
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ModifyEOSC
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearOSF
</UL>
<BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Menu_SetTime
</UL>

<P><STRONG><a name="[177]"></a>RTC_TestREG</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.RTC_TestREG))
<BR><BR>[Stack]<UL><LI>Max Depth = 228<LI>Call Chain = RTC_TestREG &rArr; RTC_ReadREG &rArr; I2C_Start &rArr; i2c_reset &rArr; MX_I2C1_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ReadREG
</UL>
<BR>[Called By]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetOSF
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetA2F
</UL>

<P><STRONG><a name="[180]"></a>RTC_WriteREG</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.RTC_WriteREG))
<BR><BR>[Stack]<UL><LI>Max Depth = 204<LI>Call Chain = RTC_WriteREG &rArr; I2C_Start &rArr; i2c_reset &rArr; MX_I2C1_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ModifyREG
</UL>

<P><STRONG><a name="[181]"></a>RTC_WriteREG_Multi</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, lto-llvm-d41ba9.o(.text.RTC_WriteREG_Multi))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = RTC_WriteREG_Multi &rArr; I2C_Start &rArr; i2c_reset &rArr; MX_I2C1_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ResetAllRegToDefault
</UL>

<P><STRONG><a name="[183]"></a>SERIAL_SendData</STRONG> (Thumb, 204 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.SERIAL_SendData))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = SERIAL_SendData &rArr; LL_USART_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_TransmitData8
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_TXE
<LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_IsActiveFlag_TC
<LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_USART_ClearFlag_TC
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_SendStringRN
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_SendString
</UL>

<P><STRONG><a name="[86]"></a>SERIAL_SendString</STRONG> (Thumb, 84 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.SERIAL_SendString))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = SERIAL_SendString &rArr; SERIAL_SendData &rArr; LL_USART_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpRTCReg
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpEEPROM
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBKPR
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SERIAL_DebugPrint
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_SendStringRN
</UL>

<P><STRONG><a name="[84]"></a>SERIAL_SendStringRN</STRONG> (Thumb, 28 bytes, Stack size 16 bytes, lto-llvm-d41ba9.o(.text.SERIAL_SendStringRN))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = SERIAL_SendStringRN &rArr; SERIAL_SendString &rArr; SERIAL_SendData &rArr; LL_USART_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_SendString
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_SendData
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpRTCReg
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpEEPROM
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DumpBKPR
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>

<P><STRONG><a name="[123]"></a>SolarToInt</STRONG> (Thumb, 112 bytes, Stack size 40 bytes, lto-llvm-d41ba9.o(.text.SolarToInt))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SolarToInt &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LUNAR_SolarToLunar
</UL>

<P><STRONG><a name="[188]"></a>SystemClock_Config</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.SystemClock_Config))
<BR><BR>[Stack]<UL><LI>Max Depth = 52<LI>Call Chain = SystemClock_Config &rArr; LL_Init1msTick &rArr; LL_InitTick &rArr; __aeabi_uidiv
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SetSystemCoreClock
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetUSARTClockSource
<LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetSysClkSource
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetI2CClockSource
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetAPB2Prescaler
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetAPB1Prescaler
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_SetAHBPrescaler
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_SetCalibTrimming
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_IsReady
<LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_HSI_Enable
<LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_RCC_GetSysClkSource
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_PWR_SetRegulVoltageScaling
<LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init1msTick
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_SetLatency
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_FLASH_GetLatency
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[197]"></a>TH_GetValue_SingleShotWithCS</STRONG> (Thumb, 168 bytes, Stack size 32 bytes, lto-llvm-d41ba9.o(.text.TH_GetValue_SingleShotWithCS))
<BR><BR>[Stack]<UL><LI>Max Depth = 244<LI>Call Chain = TH_GetValue_SingleShotWithCS &rArr; TH_ReadCmd &rArr; I2C_Start &rArr; i2c_reset &rArr; MX_I2C1_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;readout_data_conv
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;crc8
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_ReadCmd
</UL>
<BR>[Called By]<UL><LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
</UL>

<P><STRONG><a name="[198]"></a>TH_ReadCmd</STRONG> (Thumb, 166 bytes, Stack size 32 bytes, lto-llvm-d41ba9.o(.text.TH_ReadCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = TH_ReadCmd &rArr; I2C_Start &rArr; i2c_reset &rArr; MX_I2C1_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_GetValue_SingleShotWithCS
</UL>

<P><STRONG><a name="[b1]"></a>TH_SoftReset</STRONG> (Thumb, 36 bytes, Stack size 16 bytes, lto-llvm-d41ba9.o(.text.TH_SoftReset))
<BR><BR>[Stack]<UL><LI>Max Depth = 212<LI>Call Chain = TH_SoftReset &rArr; TH_WriteCmd &rArr; I2C_Start &rArr; i2c_reset &rArr; MX_I2C1_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_WriteCmd
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FullInit
</UL>

<P><STRONG><a name="[19b]"></a>TH_WriteCmd</STRONG> (Thumb, 100 bytes, Stack size 16 bytes, lto-llvm-d41ba9.o(.text.TH_WriteCmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 196<LI>Call Chain = TH_WriteCmd &rArr; I2C_Start &rArr; i2c_reset &rArr; MX_I2C1_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_SoftReset
</UL>

<P><STRONG><a name="[128]"></a>UpdateHomeDisplay</STRONG> (Thumb, 1084 bytes, Stack size 48 bytes, lto-llvm-d41ba9.o(.text.UpdateHomeDisplay))
<BR><BR>[Stack]<UL><LI>Max Depth = 356<LI>Call Chain = UpdateHomeDisplay &rArr; EPD_DrawBattery &rArr; EPD_DrawImage &rArr; EPD_SetWindow &rArr; EPD_SetCursor &rArr; epd_send_data &rArr; spi_send_data &rArr; LL_SPI_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Show
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Init
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_EnterDeepSleep
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_DrawVLine
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_DrawUTF8
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_DrawHLine
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_DrawBattery
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_ClearRAM
<LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKPR_WriteDWORD
<LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BKPR_ReadDWORD
<LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetChannel
<LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_SERIAL_DebugPrint
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_GetValue_SingleShotWithCS
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ModifyINTCN
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ModifyAM2Mask
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ModifyAM1Mask
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ModifyA2IE
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ModifyA1IE
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearA2F
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_ClearA1F
<LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_EnableGDEH029A1
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_Disable_I2C_SHT30
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Power_DisableGDEH029A1
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LUNAR_SolarToLunar
<LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_EnterStandby
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LP_EnterSleep
<LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2iz
<LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmplt
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmple
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dcmpgt
<LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2iz
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
</UL>

<P><STRONG><a name="[ad]"></a>_SERIAL_DebugPrint</STRONG> (Thumb, 124 bytes, Stack size 40 bytes, lto-llvm-d41ba9.o(.text._SERIAL_DebugPrint))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = _SERIAL_DebugPrint &rArr; SERIAL_SendString &rArr; SERIAL_SendData &rArr; LL_USART_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;snprintf
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SERIAL_SendString
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FullInit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FUNC_ReadSetting
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UpdateHomeDisplay
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Loop
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Init
</UL>

<P><STRONG><a name="[179]"></a>bcd_to_bin</STRONG> (Thumb, 36 bytes, Stack size 8 bytes, lto-llvm-d41ba9.o(.text.bcd_to_bin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = bcd_to_bin
</UL>
<BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_GetTime
</UL>

<P><STRONG><a name="[182]"></a>bin_to_bcd</STRONG> (Thumb, 44 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.bin_to_bcd))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = bin_to_bcd &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidiv
</UL>
<BR>[Called By]<UL><LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RTC_SetTime
</UL>

<P><STRONG><a name="[56]"></a>conv_adc_to_voltage</STRONG> (Thumb, 52 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.conv_adc_to_voltage))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = conv_adc_to_voltage &rArr; __aeabi_i2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetChannel
</UL>

<P><STRONG><a name="[57]"></a>conv_float_avg</STRONG> (Thumb, 262 bytes, Stack size 40 bytes, lto-llvm-d41ba9.o(.text.conv_float_avg))
<BR><BR>[Stack]<UL><LI>Max Depth = 76<LI>Call Chain = conv_float_avg &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2f
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmple
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fcmpge
<LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetChannel
</UL>

<P><STRONG><a name="[55]"></a>conv_vrefint_to_vdda</STRONG> (Thumb, 48 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.conv_vrefint_to_vdda))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = conv_vrefint_to_vdda &rArr; __aeabi_ui2f &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2f
<LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fdiv
</UL>
<BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_GetChannel
</UL>

<P><STRONG><a name="[199]"></a>crc8</STRONG> (Thumb, 146 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.crc8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = crc8
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_GetValue_SingleShotWithCS
</UL>

<P><STRONG><a name="[50]"></a>delay_100ns</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.delay_100ns))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = delay_100ns
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_StartCal
<LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ADC_Enable
</UL>

<P><STRONG><a name="[1a2]"></a>delay_100ns.170</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.delay_100ns.170))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = delay_100ns.170
</UL>
<BR>[Called By]<UL><LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epd_wait_busy
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epd_send_data_multi
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epd_send_data
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epd_send_cmd
</UL>

<P><STRONG><a name="[1aa]"></a>delay_100ns.199</STRONG> (Thumb, 36 bytes, Stack size 4 bytes, lto-llvm-d41ba9.o(.text.delay_100ns.199))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = delay_100ns.199
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;i2c_reset
</UL>

<P><STRONG><a name="[8f]"></a>eeprom_lock</STRONG> (Thumb, 68 bytes, Stack size 16 bytes, lto-llvm-d41ba9.o(.text.eeprom_lock))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = eeprom_lock &rArr; eeprom_wait_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_wait_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WriteByte
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_EraseRange
</UL>

<P><STRONG><a name="[8d]"></a>eeprom_unlock</STRONG> (Thumb, 80 bytes, Stack size 16 bytes, lto-llvm-d41ba9.o(.text.eeprom_unlock))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = eeprom_unlock &rArr; eeprom_wait_busy
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_wait_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_WriteByte
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_EraseRange
</UL>

<P><STRONG><a name="[8e]"></a>eeprom_wait_busy</STRONG> (Thumb, 104 bytes, Stack size 12 bytes, lto-llvm-d41ba9.o(.text.eeprom_wait_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = eeprom_wait_busy
</UL>
<BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EEPROM_EraseRange
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_unlock
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;eeprom_lock
</UL>

<P><STRONG><a name="[95]"></a>epd_send_cmd</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.epd_send_cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = epd_send_cmd &rArr; spi_send_data &rArr; LL_SPI_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_data
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_100ns.170
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin.168
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin.169
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Show
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_SetWindow
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_SetCursor
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_SendRAM
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_EnterSleep
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_EnterDeepSleep
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_ClearRAM
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_ClearArea
</UL>

<P><STRONG><a name="[96]"></a>epd_send_data</STRONG> (Thumb, 54 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.epd_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = epd_send_data &rArr; spi_send_data &rArr; LL_SPI_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_data
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_100ns.170
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin.168
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin.169
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Show
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_SetWindow
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_SetCursor
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_EnterSleep
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_EnterDeepSleep
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_ClearRAM
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_ClearArea
</UL>

<P><STRONG><a name="[a7]"></a>epd_send_data_multi</STRONG> (Thumb, 56 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.epd_send_data_multi))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = epd_send_data_multi &rArr; spi_send_data &rArr; LL_SPI_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spi_send_data
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_100ns.170
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin.168
<LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin.169
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_SendRAM
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Init
</UL>

<P><STRONG><a name="[a2]"></a>epd_wait_busy</STRONG> (Thumb, 120 bytes, Stack size 24 bytes, lto-llvm-d41ba9.o(.text.epd_wait_busy))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = epd_wait_busy &rArr; LL_GPIO_IsInputPinSet.177
</UL>
<BR>[Calls]<UL><LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_100ns.170
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet.177
</UL>
<BR>[Called By]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Show
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_Init
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_EnterSleep
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;EPD_EnterDeepSleep
</UL>

<P><STRONG><a name="[b5]"></a>i2c_reset</STRONG> (Thumb, 304 bytes, Stack size 32 bytes, lto-llvm-d41ba9.o(.text.i2c_reset))
<BR><BR>[Stack]<UL><LI>Max Depth = 148<LI>Call Chain = i2c_reset &rArr; MX_I2C1_Init &rArr; LL_GPIO_Init &rArr; LL_GPIO_SetPinSpeed
</UL>
<BR>[Calls]<UL><LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;delay_100ns.199
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;MX_I2C1_Init
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_mDelay
<LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_IsEnabled.120
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Enable.128
<LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_Disable.121
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_I2C_DeInit
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinPull.124
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinOutputType.123
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetPinMode.122
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_SetOutputPin.125
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_ResetOutputPin.127
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_GPIO_IsInputPinSet.126
</UL>
<BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_WriteByte
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Stop
<LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_Start
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;I2C_ReadByte
</UL>

<P><STRONG><a name="[19a]"></a>readout_data_conv</STRONG> (Thumb, 124 bytes, Stack size 32 bytes, lto-llvm-d41ba9.o(.text.readout_data_conv))
<BR><BR>[Stack]<UL><LI>Max Depth = 160<LI>Call Chain = readout_data_conv &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsr
</UL>
<BR>[Calls]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>
<BR>[Called By]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TH_GetValue_SingleShotWithCS
</UL>

<P><STRONG><a name="[1a3]"></a>spi_send_data</STRONG> (Thumb, 236 bytes, Stack size 32 bytes, lto-llvm-d41ba9.o(.text.spi_send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = spi_send_data &rArr; LL_SPI_TransmitData8
</UL>
<BR>[Calls]<UL><LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_TransmitData8
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_IsActiveFlag_TXE
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_IsActiveFlag_OVR
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_IsActiveFlag_BSY
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_SPI_ClearFlag_OVR
</UL>
<BR>[Called By]<UL><LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epd_send_data_multi
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epd_send_data
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;epd_send_cmd
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
